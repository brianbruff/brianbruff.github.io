{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2012-07-06-ninject-dependency-resolution-in-asp-mcv4-webapi/","result":{"data":{"markdownRemark":{"html":"<p>Ok so you’ve been using ASP MVC3+ and using Ninject as your Dependency Injection resolver. Now you want to start leveraging the Asp.WebApi and continue to use Ninject.</p>\n<p>I was surprised to find it wouldn’t work out of the box! Ok I’m using the “out of the box” term a little lightly here as you have to (one approach) use Nuget to install some assemblies and generate some code</p>\n<p><img src=\"/images/./image.axd?picture=image_thumb_191.png\" alt=\"\"></p>\n<h3></h3>\n<h3>A little extra effort</h3>\n<p>Brad Wilson has provided an implementation of the IDependencyResolver for WebApi that you can use for now.</p>\n<p><a href=\"https://gist.github.com/2417226\">https://gist.github.com/2417226</a></p>\n<p>What you need to do is copy that code into a file and then call it from your current NinjectWebCommon.cs by adding the highlighted line below:</p>\n<p><img src=\"/images/./image.axd?picture=image_thumb_192.png\" alt=\"\"></p>\n<p>Brian.</p>","frontmatter":{"title":"Ninject Dependency Resolution in ASP MCV4 WebApi","date":"July 06, 2012"}}},"pageContext":{"slug":"/blog/2012-07-06-ninject-dependency-resolution-in-asp-mcv4-webapi/"}},"staticQueryHashes":["2326376460","63159454"],"slicesMap":{}}