{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2009-11-03-resource-cleanup-and-lambda-expressions/","result":{"data":{"markdownRemark":{"html":"<p>A neat way of always cleaning up resources is to use Lambdas as data.</p>\n<p>Take the following</p>\n<h2>Source</h2>\n<p>[code:c#]</p>\n<p>internal interface ITryCatchReport<br>\n{<br>\nvoid Try(Action action);<br>\n}</p>\n<p>internal class TryCatchReport : ITryCatchReport<br>\n{<br>\npublic TryCatchReport(IServer server)<br>\n{<br>\n_server = server;<br>\n}</p>\n<p>public void Try(Action action)<br>\n{<br>\ntry<br>\n{<br>\naction(_server);<br>\n}<br>\ncatch (Exception e)<br>\n{<br>\nTrace.WriteLine(e.Message);<br>\n// Clean up resources<br>\n// Report errors<br>\n}<br>\n}</p>\n<p>private IServer _server;<br>\n}</p>\n<p>[/code]</p>\n<h2>Usage</h2>\n<p>[code:c#]</p>\n<p>TryCatchReport safeInvoker = new TryCatchReport(_data.Server);<br>\nsafeInvoker.Try(x =><br>\n{<br>\nx.MakeInterfaceCall();<br>\n});</p>\n<p>[/code]</p>\n<p>We are now guaranteed that in the case of an exception that the resources will get cleaned up.</p>\n<h2>Usage with code blocks</h2>\n<p>If you wish to execute many statements in the action look at this sample.</p>\n<p>[code:c#]</p>\n<p>private List GetActionDefinitions()<br>\n{<br>\nif (_actionDefinitions == null)<br>\n{<br>\nsafeInvoker.Try(x =><br>\n{<br>\nx.Do1();<br>\nx.DoSomething();<br>\nOtherFunc();<br>\n});<br>\n}</p>\n<p>return _actionDefinitions;<br>\n}</p>\n<p>[/code]</p>","frontmatter":{"title":"Resource Cleanup and Lambda Expressions","date":"November 03, 2009"}}},"pageContext":{"slug":"/blog/2009-11-03-resource-cleanup-and-lambda-expressions/"}},"staticQueryHashes":["2326376460","63159454"],"slicesMap":{}}