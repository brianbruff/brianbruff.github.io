{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2012-02-24-reading-a-file-in-windows-8-cpp-vs-csharp/","result":{"data":{"markdownRemark":{"html":"<p>I left my last blog very indecisive, would I use CPP, would I use .NET or would it be html/js.</p>\n<p>Again I’m thinking Cpp is really for faster and better performance, and while it might even be the hands down winner on ARM architecture, I don’t expect to see any performance differences in the app I’m going to write.</p>\n<p>I’m actually going to write the same application 3 times, and I’ll review my findings as I go along.</p>\n<p>I’ll present the c++ and the c# apps here and the html/js will follow in the next blog post.</p>\n<p>First up was the cpp. To be honest I did find this painful to write, the syntax is pretty convoluted. At least the markup for cpp is Silverlight so that was a no brainer.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">&lt;Grid x:Name=\"LayoutRoot\" Background=\"#FF0C0C0C\">\n\n    &lt;Button Content=\"Open\" HorizontalAlignment=\"Left\" \n\n         Height=\"4\" Margin=\"84,45,0,0\" VerticalAlignment=\"Top\"\n\n         Width=\"194\" Click=\"Button_Click\"/>\n\n    &lt;TextBlock HorizontalAlignment=\"Left\" Height=\"381\" \n\n        Margin=\"282,45,0,0\" Text=\"TextBox\" VerticalAlignment=\"Top\" \n\n        Width=\"1065\" x:Name=\"tb1\"/>\n\nGrid></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>I’ll even use the same markup for the C# application.</p>\n<p>Now to the code</p>\n<h2>C++</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">#include \"pch.h\"\n\n#include \"MainPage.xaml.h\"\n\nusing namespace Windows::UI::Xaml;\n\nusing namespace Windows::UI::Xaml::Controls;\n\nusing namespace Windows::UI::Xaml::Data;\n\nusing namespace Windows::Storage;\n\nusing namespace Windows::Storage::Pickers;\n\nusing namespace Windows::Storage::Streams;\n\nusing namespace Windows::Foundation;\n\nusing namespace CppApplication17;\n\nMainPage::MainPage()\n\n{\n\n    InitializeComponent();\n\n}\n\nMainPage::~MainPage()\n\n{\n\n}\n\nvoid CppApplication17::MainPage::Button_Click(Platform::Object^ sender, Windows::UI::Xaml::RoutedEventArgs^ e)\n\n{\n\n    auto openPicker = ref new FileOpenPicker();\n\n    openPicker->SuggestedStartLocation = PickerLocationId::Desktop;\n\n    openPicker->FileTypeFilter->Append(\".log\");\n\n    auto pickOp = openPicker->PickSingleFileAsync();\n\n    TextBlock^ content = tb1;\n\n    pickOp->Completed = ref new AsyncOperationCompletedHandler(\n\n    [content](IAsyncOperation^ operation)\n\n    {        \n\n        StorageFile^ file = operation->GetResults();\n\n        if (file)\n\n        {\n\n            //content->Text = file->FileName;\n\n            auto openOp = file->OpenForReadAsync();\n\n            openOp->Completed = ref new AsyncOperationCompletedHandler(\n\n            [content, file](IAsyncOperation^ readOperation)\n\n            {\n\n                auto stream = readOperation->GetResults();\n\n                auto reader = ref new DataReader(stream);\n\n                auto loadOp = reader->LoadAsync(file->Size);\n\n                loadOp->Completed = ref new AsyncOperationCompletedHandlerint>(\n\n                [content, reader](IAsyncOperationint>^ bytesRead)\n\n                {\n\n                    auto contentString = reader->ReadString(bytesRead->GetResults());\n\n                    content->Text = contentString;\n\n                });                \n\n                loadOp->Start();\n\n            });\n\n            openOp->Start();\n\n        }\n\n    });\n\n    pickOp->Start();\n\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>C#</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">using System;\n\nusing Windows.Storage.Pickers;\n\nusing Windows.Storage.Streams;\n\nusing Windows.UI.Xaml;\n\nnamespace CSharpApp12\n\n{\n\n    partial class MainPage\n\n    {\n\n        public MainPage()\n\n        {\n\n            InitializeComponent();\n\n        }\n\n        async private void Button_Click(object sender, RoutedEventArgs e)\n\n        {\n\n            var openPicker = new FileOpenPicker();\n\n            openPicker.SuggestedStartLocation = PickerLocationId.Desktop;\n\n            openPicker.FileTypeFilter.Add(\".log\");\n\n            var file = await openPicker.PickSingleFileAsync();\n\n            if (file != null)\n\n            {\n\n                uint size = (uint)file.Size;\n\n                var inputStream = await file.OpenForReadAsync();\n\n                var dataReader = new DataReader(inputStream);                \n\n                tb1.Text = dataReader.ReadString(await dataReader.LoadAsync(size));                \n\n            }\n\n        }\n\n    }\n\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Now I’m not going to explain every trivial detail, but’s here where I felt I c# won out.</p>\n<ul>\n<li>C++ 11 lambda syntax is a bit clumbsy, I don’t like having to pass down my closure variables or having to make a local copy first</li>\n<li>C++ intellisense is vastly inferior, to the point of being just painful. Lets be honest, tooling cannot be under estimated when it comes to productivity. (this is why I when I write Java I find that only since i started using IntelliJ has my speed really ramped up, it’s the right tool for my background.)</li>\n<li>I’m fast at typing, but using . is a lot faster than –> for pointers.</li>\n<li>The async await construct is just magical!, now, to those you who I’m sure will complain that I’m comparing apples with oranges, you have a bit of a moot point, in C++ I could have used the parallel patterns library to make it a little neater, but nowhere near as close to C#.</li>\n</ul>\n<p>My next post I’ll rewrite the same application in html + js. I predict that the syntax is not that difficult but productivity is where I feel I may fall down… let’s see.. It <strong>promise</strong> s to be interesting.</p>","frontmatter":{"title":"Reading a file in windows 8 CPP vs CSharp","date":"February 24, 2012"}}},"pageContext":{"slug":"/blog/2012-02-24-reading-a-file-in-windows-8-cpp-vs-csharp/"}},"staticQueryHashes":["2326376460","63159454"],"slicesMap":{}}