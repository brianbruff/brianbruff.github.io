{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2010-05-13-inotifypropertychanged-diagnostics/","result":{"data":{"markdownRemark":{"html":"<p>Those of you that use INotifyPropertyChanged may have noticed it's easy to break the code if you choose to refactor/rename as the property name string does not get refactored.</p>\n<p>Here is a mechanism to catch this problem at the implementation stage.</p>\n<p>[code:c#]</p>\n<p>#region Debugging Aides</p>\n<p>///<br>\n/// Warns the developer if this object does not have<br>\n/// a public property with the specified name. This<br>\n/// method does not exist in a Release build.<br>\n///<br>\n[Conditional(\"DEBUG\")]<br>\n[DebuggerStepThrough]<br>\npublic void VerifyPropertyName(string propertyName)<br>\n{<br>\n// Verify that the property name matches a real,<br>\n// public, instance property on this object.<br>\nif (TypeDescriptor.GetProperties(this)[propertyName] == null)<br>\n{<br>\nstring msg = \"Invalid property name: \" + propertyName;</p>\n<p>if (this.ThrowOnInvalidPropertyName)<br>\nthrow new Exception(msg);<br>\nelse<br>\nDebug.Fail(msg);<br>\n}<br>\n}</p>\n<p>///<br>\n/// Returns whether an exception is thrown, or if a Debug.Fail() is used<br>\n/// when an invalid property name is passed to the VerifyPropertyName method.<br>\n/// The default value is false, but subclasses used by unit tests might<br>\n/// override this property's getter to return true.<br>\n///<br>\nprotected virtual bool ThrowOnInvalidPropertyName { get; private set; }</p>\n<p>#endregion // Debugging Aides</p>\n<p>#region INotifyPropertyChanged Members</p>\n<p>///<br>\n/// Raised when a property on this object has a new value.<br>\n///<br>\npublic event PropertyChangedEventHandler PropertyChanged = (s, e) => { };</p>\n<p>///<br>\n/// Raises this object's PropertyChanged event.<br>\n///<br>\n/// The property that has a new value.<br>\nprotected virtual void OnPropertyChanged(string propertyName)<br>\n{<br>\nthis.VerifyPropertyName(propertyName);<br>\nthis.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));<br>\n}</p>\n<p>#endregion // INotifyPropertyChanged Members</p>\n<p>[/code]</p>","frontmatter":{"title":"INotifyPropertyChanged diagnostics","date":"May 13, 2010"}}},"pageContext":{"slug":"/blog/2010-05-13-inotifypropertychanged-diagnostics/"}},"staticQueryHashes":["2326376460","63159454"],"slicesMap":{}}