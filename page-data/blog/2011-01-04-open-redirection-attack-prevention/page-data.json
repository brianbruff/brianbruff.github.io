{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2011-01-04-open-redirection-attack-prevention/","result":{"data":{"markdownRemark":{"html":"<p>If you've had a look at the MVC3 preview generated code you will notice the Url.IsLocalUrl method getting called from the LogOn action.</p>\n<p>[code:c#]</p>\n<p>[HttpPost]<br>\npublic ActionResult LogOn(LogOnModel model, string returnUrl)<br>\n{<br>\nif (ModelState.IsValid)<br>\n{<br>\nif (MembershipService.ValidateUser(model.UserName, model.Password))<br>\n{<br>\nFormsService.SignIn(model.UserName, model.RememberMe);<br>\nif (Url.IsLocalUrl(returnUrl))<br>\n{<br>\nreturn Redirect(returnUrl);<br>\n}<br>\nelse<br>\n{<br>\nreturn RedirectToAction(\"Index\", \"Home\");<br>\n}<br>\n}<br>\nelse<br>\n{<br>\nModelState.AddModelError(\"\",<br>\n\"The user name or password provided is incorrect.\");<br>\n}<br>\n}</p>\n<p>// If we got this far, something failed, redisplay form<br>\nreturn View(model);<br>\n}</p>\n<p>[/code]</p>\n<p>This prevents philishing attacks by ensuring that after a successful log on the user only gets directed to the local site and not another site.</p>\n<p>Take for example I send you a email with a link to <a href=\"/Account/LogOn?returnUrl=http://brainkeating.net/Account/LogOn\">/Account/LogOn?returnUrl=http://brainkeating.net/Account/LogOn</a><br>\nAfter you successfully enter your log on detail @ briankeating.net you would get redirected to <a href=\"http://www.brAInkeating.net\">www.brAInkeating.net</a> if you are not quick enough to notice you could now be presented with an identical logon page at this different url, oh darn i typed my password wrong...., BrAIn Keating is a nasty piece of work, he will log your login details to his database and then use it to access briankeating.net with our credentials, not after you login @ brAInkeating.net you will get redirected back here to briankeating.net (where you've already authenticated and be none the wiser).</p>\n<p>So what if you are still on MVC2 (most of my web apps these days are...) what can you do to avoid this attack...</p>\n<p>That;s an easy one to answer, I've been a lazy bugger and lifted this code from <a href=\"http://www.asp.net\">www.asp.net</a></p>\n<p>[code:c#]</p>\n<p>public bool IsLocalUrl(string url) {<br>\nreturn System.Web.WebPages.RequestExtensions.IsUrlLocalToHost(<br>\nRequestContext.HttpContext.Request, url);<br>\n}</p>\n<p>[/code]</p>\n<p>The IsUrlLocalToHost method contains the actual validation logic below</p>\n<p>[code:c#]</p>\n<p>public static bool IsUrlLocalToHost(this HttpRequestBase request, string url) {<br>\nif (url.IsEmpty()) {<br>\nreturn false;<br>\n}</p>\n<p>Uri absoluteUri;<br>\nif (Uri.TryCreate(url, UriKind.Absolute, out absoluteUri)) {<br>\nreturn String.Equals(request.Url.Host, absoluteUri.Host,<br>\nStringComparison.OrdinalIgnoreCase);<br>\n}<br>\nelse {<br>\nbool isLocal = !url.StartsWith(\"http:\", StringComparison.OrdinalIgnoreCase)<br>\n&#x26;&#x26; !url.StartsWith(\"https:\", StringComparison.OrdinalIgnoreCase)<br>\n&#x26;&#x26; Uri.IsWellFormedUriString(url, UriKind.Relative);<br>\nreturn isLocal;<br>\n}<br>\n}</p>\n<p>[/code]</p>","frontmatter":{"title":"Open Redirection Attack prevention","date":"January 04, 2011"}}},"pageContext":{"slug":"/blog/2011-01-04-open-redirection-attack-prevention/"}},"staticQueryHashes":["2326376460","63159454"],"slicesMap":{}}