{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2014-08-15-writing-to-an-azure-queue/","result":{"data":{"markdownRemark":{"html":"<p>If you've seen my <a href=\"https://briankeating.net/post/Uploading-a-Blob-to-Azure-container\">previous post</a> then this post is quite similar, this time however I write to an Azure Queue and not to a blob.</p>\n<h2>Code</h2>\n<p>First of all you need an Azure storage account as before, but once this is setup, consider the following code…</p>\n<p><img src=\"/images//images/image_thumb_346.png\" alt=\"\"></p>\n<p>What I’m doing in the code above is</p>\n<ol>\n<li>Connecting to my storage account</li>\n<li>Creating the queue if it doesn't exist (remember you’ll get a bad request if you don’t name the queue correctly!).</li>\n<li>Then I create a simple message, I’m using an POCO object from another project and serializing it to JSON.</li>\n</ol>\n<h2>Did it work?</h2>\n<p>Lets use VS2013 U3 to check!</p>\n<p><img src=\"/images//images/image_thumb_347.png\" alt=\"\"></p>\n<p>Open your server explorer and select the queue under the storage account you’ve chosen in your connection string, double click</p>\n<p><img src=\"/images//images/image_thumb_348.png\" alt=\"\"></p>\n<p>Above you see the message added to the queue, you can see how many times it was de-queued and when it’s set to expire, If we use a <a href=\"http://msdn.microsoft.com/en-us/library/dn568101.aspx\">competing consumer pattern</a> that count may be more than 1!</p>\n<h2>Next</h2>\n<p>I’m a little thorn re my next post, I’ve been writing a post on c# expression trees which is nearing completion, however I think to keep in line with the current trend I’ll post how this queue can be read and feed to an Azure Service Bus topic (pub/sub)… stay tuned ;-)</p>","frontmatter":{"title":"Writing to an Azure Queue","date":"August 15, 2014"}}},"pageContext":{"slug":"/blog/2014-08-15-writing-to-an-azure-queue/"}},"staticQueryHashes":["2326376460","63159454"],"slicesMap":{}}