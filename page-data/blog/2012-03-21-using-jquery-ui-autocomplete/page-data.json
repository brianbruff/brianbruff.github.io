{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2012-03-21-using-jquery-ui-autocomplete/","result":{"data":{"markdownRemark":{"html":"<p>Hi all, here’s an example of how to use jQuery UI Autocomplete in ASP MVC3.</p>\n<p>The sample app I will show actually connects to a work related webservice, but you could use any repository you so wish.</p>\n<h1>Steps</h1>\n<h3>Create a MVC3 application</h3>\n<h3>Add jQuery UI (use nuget)</h3>\n<p><img src=\"/images/./image.axd?picture=image_thumb_166.png\" alt=\"\"></p>\n<p><img src=\"/images/./image.axd?picture=image_thumb_167.png\" alt=\"\"></p>\n<h3>Create your UX</h3>\n<p>I just added the following to my Home/Index.cshtml view</p>\n<p><img src=\"/images/./image.axd?picture=image_thumb_168.png\" alt=\"\"></p>\n<h3>Add a new script to your scripts folder</h3>\n<p><img src=\"/images/./image.axd?picture=image_thumb_169.png\" alt=\"\"></p>\n<p>here you can see that on the page load, I wrap my input “#uris” and call the jQuery UI auto complete on it.</p>\n<p>I set the source to /Home/GetModels i.e. the GetModels function on the HomeController.cs</p>\n<h3>Add the GetModels function (click to enlarge)</h3>\n<p><img src=\"/images/./image.axd?picture=image_thumb_172.png\" alt=\"\"></p>\n<p>Here you can see that I’m just using a webservice to search for entities called modelUris (just strings) and I return the first 10 matches.</p>\n<p>For testing you could just use.</p>\n<p>return Json(new string[] {“one”, “two”}, JsonRequestBehavior.AllowGet);</p>\n<h3>Here’s what it looks like</h3>\n<p><img src=\"/images/./image.axd?picture=image_thumb_171.png\" alt=\"\"></p>","frontmatter":{"title":"Using jQuery UI Autocomplete","date":"March 21, 2012"}}},"pageContext":{"slug":"/blog/2012-03-21-using-jquery-ui-autocomplete/"}},"staticQueryHashes":["2326376460","63159454"],"slicesMap":{}}