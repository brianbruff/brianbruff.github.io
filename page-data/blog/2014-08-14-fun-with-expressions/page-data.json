{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2014-08-14-fun-with-expressions/","result":{"data":{"markdownRemark":{"html":"<p>Anyone that’s dealt with Linq will undoubtedly have encountered expressions, this post how provide an expression in your class to consumers of this class.</p>\n<h2>Scenario</h2>\n<p>We would like to set some properties of an entity using expressions, also we’d like to do this fluently (effectively returning this from methods).</p>\n<p><img src=\"/images//images/image_thumb_343.png\" alt=\"\"></p>\n<p>Radio is just a simple POCO (plain old clr object).</p>\n<p><img src=\"/images//images/image_thumb_344.png\" alt=\"\"></p>\n<h2>Expression</h2>\n<p>The code below shows the implementation of of the FluentExpression class here you can see how to interrogate an expression. The expression takes a Func which means we pass a value and return an boejc</p>\n<p><img src=\"/images//images/image_thumb_345.png\" alt=\"\"></p>","frontmatter":{"title":"Fun with expressions","date":"August 14, 2014"}}},"pageContext":{"slug":"/blog/2014-08-14-fun-with-expressions/"}},"staticQueryHashes":["2326376460","63159454"],"slicesMap":{}}