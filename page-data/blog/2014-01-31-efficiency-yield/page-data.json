{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2014-01-31-efficiency-yield/","result":{"data":{"markdownRemark":{"html":"<p>Talking to an ex colleague of mine this evening about some use cases for yield, it’s quite a handy little keyword, i often use it for splitting a large collection into smaller ones (Chunk).</p>\n<p><img src=\"/images/./image.axd?picture=image_thumb_286.png\" alt=\"\"></p>\n<h2>Efficiency</h2>\n<p>I was presented with another use for yield.</p>\n<p>Take a third party API that takes an IEnumerable of objects that are expensive to create,</p>\n<p><img src=\"/images/./image.axd?picture=image_thumb_287.png\" alt=\"\"></p>\n<p>we can see that there is an early <img src=\"/images/./image.axd?picture=image_thumb_291.png\" alt=\"\">exit strategy so we may not need all items in the enumeration.</p>\n<p>Now lets say we have 3 implementations of this interface<img src=\"/images/./image.axd?picture=image_thumb_289.png\" alt=\"\"></p>\n<p>trivial i know, but assume we don’t know if they return null or not at compile time.</p>\n<p>Now here’s a nice way of passing all of the above to a third party API and only incur the construction hit as and if when they get enumerated.</p>\n<p><img src=\"/images/./image.axd?picture=image_thumb_290.png\" alt=\"\"></p>\n<p>Using the trivial logic outlined here, <strong>ExpensiveFactoryC will never get constructed</strong>.</p>","frontmatter":{"title":"Efficiency Yield","date":"January 31, 2014"}}},"pageContext":{"slug":"/blog/2014-01-31-efficiency-yield/"}},"staticQueryHashes":["2326376460","63159454"],"slicesMap":{}}