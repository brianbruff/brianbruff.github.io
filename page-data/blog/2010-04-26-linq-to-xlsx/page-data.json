{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2010-04-26-linq-to-xlsx/","result":{"data":{"markdownRemark":{"html":"<p>A sample how to read a Excel 2007/2010 using Open XML SDK V2</p>\n<p>(forgive the bad syntax highlighting)</p>\n<p>[code:c#]</p>\n<p>using System;<br>\nusing System.Collections.Generic;<br>\nusing System.Linq;<br>\nusing System.Text;<br>\nusing DocumentFormat.OpenXml.Spreadsheet;<br>\nusing DocumentFormat.OpenXml.Packaging;</p>\n<p>namespace ConsoleApplicationLinqToXlsx<br>\n{<br>\nclass Program<br>\n{<br>\nstatic void Main(string[] args)<br>\n{<br>\n//Declare variables to hold refernces to Excel objects.<br>\nWorkbook workBook;<br>\nSharedStringTable sharedStrings;<br>\nIEnumerable workSheets;<br>\nWorksheetPart custSheet;<br>\nWorksheetPart orderSheet;</p>\n<p>//Declare helper variables.<br>\nstring custID;<br>\nstring orderID;<br>\nList customers;<br>\nList orders;</p>\n<p>//Open the Excel workbook.<br>\nusing (SpreadsheetDocument document =<br>\nSpreadsheetDocument.Open(@\"d:\\Temp\\ConsoleApplicationLinqToXlsx\\TestOpenXMl.xlsx \", true))<br>\n{<br>\n//References to the workbook and Shared String Table.<br>\nworkBook = document.WorkbookPart.Workbook;<br>\nworkSheets = workBook.Descendants();<br>\nsharedStrings =<br>\ndocument.WorkbookPart.SharedStringTablePart.SharedStringTable;</p>\n<p>//Reference to Excel Worksheet with Customer data.<br>\ncustID =<br>\nworkSheets.First(s => s.Name == @\"Customer\").Id;<br>\ncustSheet =<br>\n(WorksheetPart)document.WorkbookPart.GetPartById(custID);</p>\n<p>//Load customer data to business object.<br>\ncustomers =<br>\nCustomer.LoadCustomers(custSheet.Worksheet, sharedStrings);</p>\n<p>//Reference to Excel worksheet with order data.<br>\norderID =<br>\nworkSheets.First(sheet => sheet.Name == @\"Order\").Id;<br>\norderSheet =<br>\n(WorksheetPart)document.WorkbookPart.GetPartById(orderID);</p>\n<p>//Load order data to business object.<br>\norders =<br>\nOrder.LoadOrders(orderSheet.Worksheet, sharedStrings);</p>\n<p>//List all customers to the console.<br>\n//Write header information to the console.<br>\nConsole.WriteLine(\"All Customers\");<br>\nConsole.WriteLine(\"{0, -15} {1, -15} {2, -5}\",<br>\n\"Customer\", \"City\", \"State\");</p>\n<p>//LINQ Query for all customers.<br>\nIEnumerable allCustomers =<br>\nfrom customer in customers<br>\nselect customer;</p>\n<p>//Execute query and write customer information to the console.<br>\nforeach (Customer c in allCustomers)<br>\n{<br>\nConsole.WriteLine(\"{0, -15} {1, -15} {2, -5}\",<br>\nc.Name, c.City, c.State);<br>\n}<br>\nConsole.WriteLine();<br>\nConsole.WriteLine();</p>\n<p>//Write all orders over $100 to the console.<br>\n//Write header information to the console.<br>\nConsole.WriteLine(\"All Orders over $100\");<br>\nConsole.WriteLine(\"{0, -15} {1, -10} {2, 10} {3, -5}\",<br>\n\"Customer\", \"Date\", \"Amount\", \"Status\");</p>\n<p>//LINQ Query for all orders over $100.<br>\n//Join used to display customer information for the order.<br>\nvar highOrders =<br>\nfrom customer in customers<br>\njoin order in orders on customer.Name equals order.Customer<br>\nwhere order.Amount > 100.00<br>\nselect new<br>\n{<br>\ncustomer.Name,<br>\norder.Date,<br>\norder.Amount,<br>\norder.Status<br>\n};</p>\n<p>//Execute query and write information to the console.<br>\nforeach (var result in highOrders)<br>\n{<br>\nConsole.WriteLine(\"{0, -15} {1, -10} {2, 10} {3, -5}\",<br>\nresult.Name, result.Date.ToShortDateString(),<br>\nresult.Amount, result.Status);<br>\n}<br>\nConsole.WriteLine();<br>\nConsole.WriteLine();</p>\n<p>//Report on customer orders by status.<br>\n//Write header information to the console.<br>\nConsole.WriteLine(\"Customer Orders by Status\");</p>\n<p>//LINQ Query for summarizing customer order information by status.<br>\n//There are two LINQ queries.<br>\n//Internal query is used to group orders together by status and<br>\n//calculates the total order amount and number of orders.<br>\n//External query is used to join Customer information.<br>\nvar sumoforders =<br>\nfrom customer in customers<br>\nselect new<br>\n{<br>\ncustomer.Name,<br>\nstatusTotals =<br>\nfrom order in orders<br>\nwhere order.Customer == customer.Name<br>\ngroup order.Amount by order.Status into statusGroup<br>\nselect new<br>\n{<br>\nstatus = statusGroup.Key,<br>\norderAmount = statusGroup.Sum(),<br>\norderCount = statusGroup.Count()<br>\n}<br>\n};</p>\n<p>//Execute query and write information to the console.<br>\nforeach (var customer in sumoforders)<br>\n{<br>\n//Write Customer name to the console.<br>\nConsole.WriteLine(\"-{0}-\", customer.Name);<br>\nforeach (var x in customer.statusTotals)<br>\n{<br>\nConsole.WriteLine(\" {0, -10}: {2,2} orders totaling {1, 7}\",<br>\nx.status, x.orderAmount, x.orderCount);<br>\n}<br>\nConsole.WriteLine();<br>\n}</p>\n<p>//Keep the console window open.<br>\nConsole.Read();<br>\n}<br>\n}</p>\n<p>///<br>\n/// Used to store customer information for analysis.<br>\n///<br>\npublic class Customer<br>\n{<br>\n//Properties.<br>\npublic string Name { get; set; }<br>\npublic string City { get; set; }<br>\npublic string State { get; set; }</p>\n<p>///<br>\n/// Helper method for creating a list of customers<br>\n/// from an Excel worksheet.<br>\n///<br>\npublic static List LoadCustomers(Worksheet worksheet,<br>\nSharedStringTable sharedString)<br>\n{<br>\n//Initialize the customer list.<br>\nList result = new List();</p>\n<p>//LINQ query to skip first row with column names.<br>\nIEnumerable dataRows =<br>\nfrom row in worksheet.Descendants()<br>\nwhere row.RowIndex > 1<br>\nselect row;</p>\n<p>foreach (Row row in dataRows)<br>\n{<br>\n//LINQ query to return the row's cell values.<br>\n//Where clause filters out any cells that do not contain a value.<br>\n//Select returns the value of a cell unless the cell contains<br>\n// a Shared String.<br>\n//If the cell contains a Shared String, its value will be a<br>\n// reference id which will be used to look up the value in the<br>\n// Shared String table.<br>\nIEnumerable textValues =<br>\nfrom cell in row.Descendants()<br>\nwhere cell.CellValue != null<br>\nselect<br>\n(cell.DataType != null<br>\n&#x26;&#x26; cell.DataType.HasValue<br>\n&#x26;&#x26; cell.DataType == CellValues.SharedString<br>\n? sharedString.ChildElements[<br>\nint.Parse(cell.CellValue.InnerText)].InnerText<br>\n: cell.CellValue.InnerText)<br>\n;</p>\n<p>//Check to verify the row contained data.<br>\nif (textValues.Count() > 0)<br>\n{<br>\n//Create a customer and add it to the list.<br>\nvar textArray = textValues.ToArray();<br>\nCustomer customer = new Customer();<br>\ncustomer.Name = textArray[0];<br>\ncustomer.City = textArray[1];<br>\ncustomer.State = textArray[2];<br>\nresult.Add(customer);<br>\n}<br>\nelse<br>\n{<br>\n//If no cells, then you have reached the end of the table.<br>\nbreak;<br>\n}<br>\n}</p>\n<p>//Return populated list of customers.<br>\nreturn result;<br>\n}<br>\n}</p>\n<p>///<br>\n/// Used to store order information for analysis.<br>\n///<br>\npublic class Order<br>\n{<br>\n//Properties.<br>\npublic string Number { get; set; }<br>\npublic DateTime Date { get; set; }<br>\npublic string Customer { get; set; }<br>\npublic Double Amount { get; set; }<br>\npublic string Status { get; set; }</p>\n<p>///<br>\n/// Helper method for creating a list of orders<br>\n/// from an Excel worksheet.<br>\n///<br>\npublic static List LoadOrders(Worksheet worksheet,<br>\nSharedStringTable sharedString)<br>\n{<br>\n//Initialize order list.<br>\nList result = new List();</p>\n<p>//LINQ query to skip first row with column names.<br>\nIEnumerable dataRows =<br>\nfrom row in worksheet.Descendants()<br>\nwhere row.RowIndex > 1<br>\nselect row;</p>\n<p>foreach (Row row in dataRows)<br>\n{<br>\n//LINQ query to return the row's cell values.<br>\n//Where clause filters out any cells that do not contain a value.<br>\n//Select returns cell's value unless the cell contains<br>\n// a shared string.<br>\n//If the cell contains a shared string its value will be a<br>\n// reference id which will be used to look up the value in the<br>\n// shared string table.<br>\nIEnumerable textValues =<br>\nfrom cell in row.Descendants()<br>\nwhere cell.CellValue != null<br>\nselect<br>\n(cell.DataType != null<br>\n&#x26;&#x26; cell.DataType.HasValue<br>\n&#x26;&#x26; cell.DataType == CellValues.SharedString<br>\n? sharedString.ChildElements[<br>\nint.Parse(cell.CellValue.InnerText)].InnerText<br>\n: cell.CellValue.InnerText)<br>\n;</p>\n<p>//Check to verify the row contains data.<br>\nif (textValues.Count() > 0)<br>\n{<br>\n//Create an Order and add it to the list.<br>\nvar textArray = textValues.ToArray();<br>\nOrder order = new Order();<br>\norder.Number = textArray[0];<br>\norder.Date = new DateTime(1900, 1, 1).AddDays(<br>\nDouble.Parse(textArray[1]) - 2);<br>\norder.Customer = textArray[2];<br>\norder.Amount = Double.Parse(textArray[3]);<br>\norder.Status = textArray[4];<br>\nresult.Add(order);<br>\n}<br>\nelse<br>\n{<br>\n//If no cells, then you have reached the end of the table.<br>\nbreak;<br>\n}<br>\n}</p>\n<p>//Return populated list of orders.<br>\nreturn result;<br>\n}<br>\n}</p>\n<p>}<br>\n}</p>\n<p>[/code]</p>","frontmatter":{"title":"Linq to Xlsx","date":"April 26, 2010"}}},"pageContext":{"slug":"/blog/2010-04-26-linq-to-xlsx/"}},"staticQueryHashes":["2326376460","63159454"],"slicesMap":{}}