{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2014-03-08-recursive-directives-angular-js/","result":{"data":{"markdownRemark":{"html":"<p>Another day, another post with me talking about something I barely know about. Today I’m going to show you my <del>first</del> second stab at a recursive Angular.js directive.</p>\n<p>Let’s first have a look at the end goal (forgive the as of yet unfinished css and bad contrasting colors)</p>\n<p><img src=\"/images/./image.axd?picture=image_thumb_296.png\" alt=\"\"><br>\nBasically we have a list of objects in the dependency tree, each of these in turn can contain a list of children.</p>\n<h2>JSON</h2>\n<p>Lets have a look at the JSON we are trying to represent</p>\n<p><img src=\"/images/./image.axd?picture=image_thumb_297.png\" alt=\"\"></p>\n<p>It’s pretty simple, each dependency can have children that are in fact themselves the very same object literal types.</p>\n<h2>Directives</h2>\n<p>I created two directives, one for the dependency and one for it’s children.</p>\n<p><img src=\"/images/./image.axd?picture=image_thumb_298.png\" alt=\"\"></p>\n<p>As seen from the screen clipping the directives are pretty simple, however I’d like to draw your attentions to the link function of the curve directive. The reason I had to do this is because on my first attempt I tried to just call the  on the fly and $compiled them in (note: $compile is injected).</p>\n<p>The templates for these widgets are pretty trivial (i could have in-lined with “template” but choose to use templateUrl as I much prefer this approach.</p>\n<p>This template just creates a</p>\n<p>and then calls the other directive that creates the</p>\n<ul>\n<li>entries.<img src=\"/images/./image.axd?picture=image_thumb_299.png\" alt=\"\"></li>\n</ul>\n<p>This template shows the</p>\n<ul>\n<li>entries, remember that I $compile in any children in the directive, it also adds a good or bad class if necessary for styling.</li>\n</ul>\n<p><img src=\"/images/./image.axd?picture=image_thumb_300.png\" alt=\"\"></p>\n<p>I hope this helps someone should they also encounter the same problem I did with the infinite loop, I’m definitely not saying what is presented above is best practise as I’m relatively new to angular.js after hanging up my <em>knockout.js</em> belt (it was good while it lasted but angular is much more in line what what I need for SPA apps).</p>","frontmatter":{"title":"Recursive Directives Angular.js","date":"March 08, 2014"}}},"pageContext":{"slug":"/blog/2014-03-08-recursive-directives-angular-js/"}},"staticQueryHashes":["2326376460","63159454"],"slicesMap":{}}