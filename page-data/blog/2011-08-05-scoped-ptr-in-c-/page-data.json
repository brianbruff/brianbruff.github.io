{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2011-08-05-scoped-ptr-in-c-/","result":{"data":{"markdownRemark":{"html":"<p>Is there a better way? Or at least a more generic way to leverage the dispose pattern? Well hereâ€™s one I thought of tonight</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">   1:      public class ScopeMngr : IDisposable\n\n   2:      {        \n\n   3:          private Action _dispose = null;\n\n   4:   \n\n   5:          public ScopeMngr(Action init, Action dispose)\n\n   6:              : this(dispose)\n\n   7:          {\n\n   8:              init();            \n\n   9:          }\n\n  10:   \n\n  11:          public ScopeMngr(Action dispose)\n\n  12:          {\n\n  13:              _dispose = dispose;\n\n  14:          }\n\n  15:   \n\n  16:          public void Dispose()\n\n  17:          {\n\n  18:              if (_dispose != null)\n\n  19:              {\n\n  20:                  _dispose();\n\n  21:                  _dispose = null;\n\n  22:              }\n\n  23:          }\n\n  24:      }</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Sample usage:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">   1:      public partial class Form1 : Form\n\n   2:      {\n\n   3:          public Form1()\n\n   4:          {\n\n   5:              InitializeComponent();\n\n   6:          }\n\n   7:   \n\n   8:          private void button1_Click(object sender, EventArgs e)\n\n   9:          {\n\n  10:              using (var sm = new ScopeMngr(() => Cursor = Cursors.WaitCursor, () => Cursor = Cursors.Default))\n\n  11:              {\n\n  12:                  Thread.Sleep(TimeSpan.FromSeconds(10));\n\n  13:              }\n\n  14:   \n\n  15:              bool updating = false;\n\n  16:              using (var sm = new ScopeMngr(() => updating = true, () => updating = false))\n\n  17:              {\n\n  18:                  // updating is true here\n\n  19:                  // update the UX etc.\n\n  20:              }\n\n  21:              // updating is false here\n\n  22:   \n\n  23:          }\n\n  24:      }</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>P.s. I know creating an object to reset a boolean is a bit of overkill, but see my comments and argument for same in my c++ <a href=\"/blog/post/2011/08/04/C++-11%E2%80%93shared_ptr.aspx\">post</a></p>\n<p>Enjoy.</p>\n<p>p.s. you could also just use a try {} finally {}</p>","frontmatter":{"title":"scoped_ptr in C#","date":"August 05, 2011"}}},"pageContext":{"slug":"/blog/2011-08-05-scoped-ptr-in-c-/"}},"staticQueryHashes":["2326376460","63159454"],"slicesMap":{}}