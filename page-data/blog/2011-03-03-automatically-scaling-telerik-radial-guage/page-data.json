{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2011-03-03-automatically-scaling-telerik-radial-guage/","result":{"data":{"markdownRemark":{"html":"<p>Took a little time out tonight from the web application I’m working on as I want to create a little dashboard prototype that has to be desktop based as a result of where it will be used.</p>\n<p>I’ve got a server JBPM (Java business process management.. pretty similar to WF4) component that is writing log files, these log files are divided into subdirectories for each JBPM workflow that gets executed.</p>\n<p><img src=\"/images//blog/image.axd?picture=image_thumb_31.png\" alt=\"\"></p>\n<p>The idea is to provide a quick view for the counts of server logs at a glance with a gauge, (i'll be putting this gauge into a template for use in a listbox, but as a first step I’ve just displayed the details of the files in the first workflow folder.</p>\n<p>Here’s what it looks like</p>\n<p><img src=\"/images//blog/image.axd?picture=image_thumb_32.png\" alt=\"\"></p>\n<p>The text is bound to the directory name, the yellow/orange radial bar is the count of all the log files in all subdirectories, and the needle is the count of files in the EchoLoader directory.</p>\n<p>Here’s the xaml</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">   1:  \"Datagenic__Monitor.MainWindow\"\n\n   2:                  xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n\n   3:                  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n\n   4:                  xmlns:telerik=\"http://schemas.telerik.com/2008/xaml/presentation\"\n\n   5:                  Title=\"MainWindow\" Height=\"350\" Width=\"525\">\n\n   6:      \n\n   7:          \"/Datagenic-%20Monitor;component/Images/background.png\" />\n\n   8:      \n\n   9:      \n\n  10:          \n\n  11:              \"radialScale\" Min=\"0\" Max=\"{Binding Path=MaxScale}\" MajorTicks=\"10\"\n\n  12:                              MiddleTicks=\"1\" MinorTicks=\"3\">\n\n  13:   \n\n  14:                  \n\n  15:                      \n\n  16:                  \n\n  17:                  \n\n  18:                      \"0.07\" />\n\n  19:                  \n\n  20:                  \n\n  21:                      \"0.05\" />\n\n  22:                  \n\n  23:   \n\n  24:                  \n\n  25:                      \"10\" />\n\n  26:                  \n\n  27:   \n\n  28:                  \n\n  29:                      \"gauge1_radialBar\" IsAnimated=\"True\"  \n                               Value=\"{Binding Path=TotalLogCount}\" />\n\n  30:   \n\n  31:                      \"gauge1_needle\" IsAnimated=\"true\"  \n                                Value=\"{Binding Path=WFExecutions[0].LogCount}\" />\n\n  32:                  \n\n  33:              \n\n  34:          \n\n  35:          \n\n  36:              \n\n  37:                  \"0.60*\" />\n\n  38:                  \"0.40*\" />\n\n  39:              \n\n  40:   \n\n  41:              \"1\" VerticalAlignment=\"Top\" HorizontalAlignment=\"Center\"\n\n  42:                              Foreground=\"GhostWhite\" FontFamily=\"CourierNew\"  \n                                   Text=\"{Binding Path=WFExecutions[0].FolderName}\" />\n\n  43:          \n\n  44:   \n\n  45:      \n\n  46:  </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Here’s the code</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">   1:  using System;\n\n   2:  using System.Collections.Generic;\n\n   3:  using System.Linq;\n\n   4:  using System.Text;\n\n   5:  using System.Windows;\n\n   6:  using System.Windows.Controls;\n\n   7:  using System.Windows.Data;\n\n   8:  using System.Windows.Documents;\n\n   9:  using System.Windows.Input;\n\n  10:  using System.Windows.Media;\n\n  11:  using System.Windows.Media.Imaging;\n\n  12:  using System.Windows.Navigation;\n\n  13:  using System.Windows.Shapes;\n\n  14:  using System.Collections.ObjectModel;\n\n  15:  using System.ComponentModel;\n\n  16:  using System.IO;\n\n  17:   \n\n  18:  namespace Datagenic__Monitor\n\n  19:  {\n\n  20:      /// \n\n  21:      /// Interaction logic for MainWindow.xaml\n\n  22:      /// \n\n  23:      public partial class MainWindow : Window\n\n  24:      {\n\n  25:          public MainWindow()\n\n  26:          {\n\n  27:              InitializeComponent();\n\n  28:   \n\n  29:              this.DataContext = _wfExecutions;\n\n  30:          }\n\n  31:   \n\n  32:          private WorkflowsExecutions _wfExecutions = new WorkflowsExecutions();\n\n  33:      }\n\n  34:   \n\n  35:   \n\n  36:      class WorkflowsExecutions :NotifyPropertyChangedBase\n\n  37:      {\n\n  38:          public WorkflowsExecutions()\n\n  39:          {\n\n  40:              this.WFExecutions = new List();\n\n  41:   \n\n  42:              // Get the individual folders that corresponds to the logs\n\n  43:              var executionFolders = System.IO.Directory.EnumerateDirectories(_executionFolder);\n\n  44:              if (executionFolders != null)\n\n  45:                  executionFolders.ToList().ForEach(f =>\n\n  46:                      {\n\n  47:                          var we = new WorkflowExecutions(f);                        \n\n  48:                          we.PropertyChanged += ItemPropChanged;\n\n  49:                          this.WFExecutions.Add(we);\n\n  50:                      });\n\n  51:          }\n\n  52:   \n\n  53:          void ItemPropChanged(object sender, PropertyChangedEventArgs e)\n\n  54:          {\n\n  55:              if (e.PropertyName == \"LogCount\")\n\n  56:              {\n\n  57:                  FirePropertyChanged(\"TotalLogCount\");\n\n  58:                  if (TotalLogCount > MaxScale)\n\n  59:                      FirePropertyChanged(\"MaxScale\");\n\n  60:              }\n\n  61:          }\n\n  62:   \n\n  63:          public int TotalLogCount\n\n  64:          {\n\n  65:              get\n\n  66:              {\n\n  67:                  return this.WFExecutions.Sum(we => we.LogCount);\n\n  68:              }\n\n  69:              set { }\n\n  70:          }\n\n  71:   \n\n  72:          public int MaxScale\n\n  73:          {\n\n  74:              get\n\n  75:              {\n\n  76:                  int max = (int)(this.TotalLogCount * 1.5);\n\n  77:                  max = max + (10 - max % 10);\n\n  78:                  return Math.Max(100, max);\n\n  79:              }\n\n  80:              set { }\n\n  81:          }\n\n  82:   \n\n  83:          public List WFExecutions { get; set; }\n\n  84:          \n\n  85:   \n\n  86:          private string _executionFolder = Properties.Settings.Default.ExecutionLogFolder;\n\n  87:   \n\n  88:   \n\n  89:   \n\n  90:          //event PropertyChangedEventHandler PropertyChanged = (s, e) => { };\n\n  91:      }\n\n  92:   \n\n  93:      class WorkflowExecutions : NotifyPropertyChangedBase\n\n  94:      {\n\n  95:          public WorkflowExecutions(string folder)\n\n  96:          {\n\n  97:              this.FolderName = System.IO.Path.GetFileName(folder);\n\n  98:              _watcher = new FileSystemWatcher(folder);\n\n  99:              _watcher.Deleted += (s, e) => Update();\n\n 100:              _watcher.Created += (s, e) => Update();\n\n 101:              _watcher.EnableRaisingEvents = true;            \n\n 102:              Update();\n\n 103:          }\n\n 104:          \n\n 105:   \n\n 106:          public string FolderName { get; set; }\n\n 107:                    \n\n 108:   \n\n 109:          public int LogCount\n\n 110:          {\n\n 111:              get { return _logCount; }\n\n 112:              set\n\n 113:              {\n\n 114:                  _logCount = value;\n\n 115:                  base.FirePropertyChanged(\"LogCount\");\n\n 116:              }\n\n 117:          }\n\n 118:   \n\n 119:          private void Update()\n\n 120:          {\n\n 121:              var files = System.IO.Directory.EnumerateFiles(_watcher.Path);\n\n 122:              this.LogCount = files.Count();\n\n 123:          }\n\n 124:   \n\n 125:          private int _logCount = 0;\n\n 126:          private FileSystemWatcher _watcher;\n\n 127:   \n\n 128:      }\n\n 129:  }</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The interesting part is the auto scaling, if the TotalLogFile count passes the max scale level the view will get the property changed notification and update it bindings. (Note: I half expect telerik gauge to auto scale, if i spend a few minutes to figure out how… <img src=\"/blog/image.axd?picture=wlEmoticon-shifty.png\" alt=\"Shifty\"> )</p>","frontmatter":{"title":"Automatically Scaling Telerik Radial Guage","date":"March 03, 2011"}}},"pageContext":{"slug":"/blog/2011-03-03-automatically-scaling-telerik-radial-guage/"}},"staticQueryHashes":["2326376460","63159454"],"slicesMap":{}}