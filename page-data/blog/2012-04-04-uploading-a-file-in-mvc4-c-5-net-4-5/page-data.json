{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2012-04-04-uploading-a-file-in-mvc4-c-5-net-4-5/","result":{"data":{"markdownRemark":{"html":"<p>Back on the bleeding edge again <img src=\"./image.axd?picture=wlEmoticon-hotsmile_2.png\" alt=\"Hot smile\"> I’m in the early stages of my next killer app and I’m investigating the pros and cons of using the new ASP WebApi.</p>\n<p>One of the features of this so called killer app will be to upload pictures (nothing special I agree). But how would I do this for all the clients I hope to support (WinRT/WP7/Html5/IOS).</p>\n<p>Let me first present the server that will be used for all these clients, I’ll then follow up with what I consider to be the simplest client a html5 browser!</p>\n<h1>Server</h1>\n<p>So I fired up VS11 and created a new MVC4 application using .net 4.5 / C# and the WebApi template.</p>\n<p>I then added a controller called FileUploadController.cs</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">   1:  using System.Collections.Generic;\n\n   2:  using System.Linq;\n\n   3:  using System.Net;\n\n   4:  using System.Net.Http;\n\n   5:  using System.Threading.Tasks;\n\n   6:  using System.Web.Http;\n\n   7:   \n\n   8:  namespace MvcApplication16.Controllers\n\n   9:  {\n\n  10:      public class FileUploadController : ApiController\n\n  11:      {\n\n  12:          public async Taskstring>> PostMultipartStream()\n\n  13:          {\n\n  14:              // Check we're uploading a file\n\n  15:              if (!Request.Content.IsMimeMultipartContent(\"form-data\"))            \n\n  16:                  throw new HttpResponseException(HttpStatusCode.UnsupportedMediaType);\n\n  17:                 \n\n  18:              // Create the stream provider, and tell it sort files in my c:\\temp\\uploads folder\n\n  19:              var provider = new MultipartFormDataStreamProvider(\"c:\\\\temp\\\\uploads\");\n\n  20:   \n\n  21:              // Read using the stream\n\n  22:              var bodyparts = await Request.Content.ReadAsMultipartAsync(provider);            \n\n  23:          \n\n  24:              // Create response.\n\n  25:              return provider.BodyPartFileNames.Select(kv => kv.Value);            \n\n  26:          }\n\n  27:      }\n\n  28:      \n\n  29:  }</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>You can see from line 12 that I’ve made this operation async, you’ve really got to admire the simplicity of async/await construct in .net 4.5! In line 22 you can see that the compiler and some state machine magic allow the freeing up of the asp worker thread….. (If you have read my previous posts you may be a little confused now.. didn’t I say that Tasks will use use the same threadpool!? <a href=\"http://stackoverflow.com/questions/9772998/mvc-4-web-api-returning-tasks-from-actions\">have a look at this link for someone that pondered the very same concerns</a> )</p>\n<h1>HTML5 Client</h1>\n<p>The client couldn’t have been easier, fist a look at it in the browser</p>\n<p><img src=\"/images/./image.axd?picture=image_thumb_173.png\" alt=\"\"></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">   1:  DOCTYPE html>\n\n   2:  &lt;html lang=\"en\">\n\n   3:  &lt;head>\n\n   4:      &lt;meta charset=\"utf-8\" />\n\n   5:      &lt;title>ASP.NET Web APItitle>\n\n   6:      &lt;link href=\"@Url.Content(\"~/Content/Site.css\")\" rel=\"stylesheet\" type=\"text/css\" />\n\n   7:      &lt;meta name=\"viewport\" content=\"width=device-width\" />\n\n   8:  head>\n\n   9:  &lt;body>\n\n  10:      @using (Html.BeginForm(\"FileUpload\", \"api\", FormMethod.Post, new { enctype = \"multipart/form-data\" }))\n\n  11:      { \n\n  12:          &lt;div>Please select some filesdiv>\n\n  13:          &lt;input name=\"data\" type=\"file\" multiple>\n\n  14:          &lt;input type=\"submit\" />            \n\n  15:      }\n\n  16:  body>\n\n  17:  html></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The important part above is using the enctype attribute, in fact line 10 loosely translates to</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">\"~/api/FileUpload\" enctype=\"multipart/form-data\" method=\"POST\"></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Don’t believe me? Then try VS11’s awesome new feature – page inspector</p>\n<p>Right click on the html and choose view in page inspector</p>\n<p><img src=\"/images/./image.axd?picture=image_thumb_175.png\" alt=\"\"></p>\n<p>and we’re done! Of course in the real world we’ll use ajax with a few trick re sandbox, but here’s the response in the browser with xml.</p>\n<p><img src=\"/images/./image.axd?picture=image_thumb_174.png\" alt=\"\"></p>\n<p>I’ll hopefully follow up with the samples for the client list below when I get to the respective development machines.</p>\n<ul>\n<li>WinRT (c#/xaml)</li>\n<li>iPhone (objective c)</li>\n<li>Android (java)</li>\n</ul>","frontmatter":{"title":"Uploading a file in MVC4 C#5 .NET 4.5","date":"April 04, 2012"}}},"pageContext":{"slug":"/blog/2012-04-04-uploading-a-file-in-mvc4-c-5-net-4-5/"}},"staticQueryHashes":["2326376460","63159454"],"slicesMap":{}}