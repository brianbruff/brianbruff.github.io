{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2010-12-13-it-s-my-football-and-i-m-going-home/","result":{"data":{"markdownRemark":{"html":"<p>We've all created API libraries, and libraries by their nature encourage resuse.<br>\nHowever what happens if you want to be selective in who else uses your assembly?<br>\nOne simplistic approach would be to ensure that the calling assembly has the same public key</p>\n<p>private void CheckCallerAllowed()<br>\n{<br>\nvar myPubKeyToken = Assembly.GetExecutingAssembly().GetName().GetPublicKeyToken();<br>\nvar entryPubKeyToken = Assembly.GetEntryAssembly().GetName().GetPublicKeyToken();</p>\n<p>if (myPubKeyToken.Length != entryPubKeyToken.Length)<br>\nthrow new ApplicationException(\"Assembly not licensed\");</p>\n<p>for (int idx = 0; idx &#x3C; myPubKeyToken.Count(); ++idx)<br>\nif (myPubKeyToken[idx] != entryPubKeyToken[idx])<br>\nthrow new ApplicationException(\"Assembly not licensed\");<br>\n}</p>\n<p>Place a call to the function above in your public interface.</p>","frontmatter":{"title":"It's my football and I'm going home","date":"December 13, 2010"}}},"pageContext":{"slug":"/blog/2010-12-13-it-s-my-football-and-i-m-going-home/"}},"staticQueryHashes":["2326376460","63159454"],"slicesMap":{}}