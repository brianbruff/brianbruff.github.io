{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2011-04-11-asp-mvc-controller-exception-handlers/","result":{"data":{"markdownRemark":{"html":"<p>When you crate a new MVC project a view called Error.aspx is created for you in the Views/Shared folder.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">&lt;%@ Page Language=\"C#\" MasterPageFile=\"~/Views/Shared/Site.Master\"   \nInherits=\"System.Web.Mvc.ViewPage\" %>\n\n&lt;asp:Content ID=\"errorTitle\" ContentPlaceHolderID=\"TitleContent\" runat=\"server\">\n\n    Error\n\nasp:Content>\n\n&lt;asp:Content ID=\"errorContent\" ContentPlaceHolderID=\"MainContent\" runat=\"server\">\n\n    &lt;h2>\n\n        Sorry, an error occurred while processing your request.\n\n    h2>\n\nasp:Content></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>To instruct controller actions to use this Error handler you need to use the HandlErrorAttribute action filter, this is the default exception handler present in MVC.<br>\nHandleError is used to specify an exception type to handle and a View (and Master View if necessary) to display if an action method throws an unhandled exception that matches or is derived from the specified exception type.</p>\n<p>Some points to note:</p>\n<ul>\n<li>If no exception type is specified, then the filter handles all exception.</li>\n<li>If no view is specified then the default Error view is used.</li>\n<li>As mentioned earlier, exceptions are caught by base types, so it’s important to specify an order catching the most specific exception types first (much like a standard try catch code block.</li>\n<li>The handler won’t get called in debug builds as it checks the HttpContext.IsCustomErrorEnabled (yellow screen of death is preferred)</li>\n</ul>\n<p>e.g.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">// Dont do this\n\n[HandleError(Order=1, ExceptionType=typeof(Exception)]\n\n[HandleError(Order=2, ExceptionType=typeof(ArgumentNullException, View=ArgNull)]</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>You’ll need to reverse the order, because if you want the ArgumentNullException to be handled differently, the exception shouldn’t get swallowed by the typeof(Exception) handler.</p>","frontmatter":{"title":"ASP MVC Controller Exception handlers","date":"April 11, 2011"}}},"pageContext":{"slug":"/blog/2011-04-11-asp-mvc-controller-exception-handlers/"}},"staticQueryHashes":["2326376460","63159454"],"slicesMap":{}}