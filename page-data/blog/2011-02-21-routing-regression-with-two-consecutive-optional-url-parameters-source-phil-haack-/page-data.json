{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2011-02-21-routing-regression-with-two-consecutive-optional-url-parameters-source-phil-haack-/","result":{"data":{"markdownRemark":{"html":"<p>It pains me to say it, but ASP.NET MVC 3 introduces an ugly regression in routing from ASP.NET MVC 2. The good news is that there’s an easy workaround.</p>\n<p>The bug manifests when you have a route with two consecutive <em>optional</em> URL parameters and you attempt to use the route to generate an URL. The incoming request matching behavior is unchanged and continues to work fine.</p>\n<p>For example, suppose you have the following route defined:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">routes.MapRoute(\"by-day\",          \"archive/{month}/{day}\",        \n\n new { controller = \"Home\", action = \"Index\",           \n\n   month = UrlParameter.Optional, day = UrlParameter.Optional } );</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Notice that the month and day parameters are both optional.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">routes.MapRoute(\"by-day\",          \n\n    \"archive/{month}/{day}\",\n\n    new { controller = \"Home\", action = \"Index\", \n\n    month = UrlParameter.Optional, day = UrlParameter.Optional } );</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Now suppose you have the following view code to generate URLs using this route.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">@Url.RouteUrl(\"by-day\", new { month = 1, day = 23 })\n\n@Url.RouteUrl(\"by-day\", new { month = 1 })\n\n@Url.RouteUrl(\"by-day\", null)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>In ASP.NET MVC 2 the above code (well actually, the equivalent to the above code since Razor didn’t exist in ASP.NET MVC 2) would result in the following URLs as you would expect:</p>\n<ul>\n<li>/archive/1/23</li>\n<li>/archive/1</li>\n<li>/archive</li>\n</ul>\n<p>But in ASP.NET MVC 3, you get:</p>\n<ul>\n<li>/archive/1/23</li>\n<li>/archive/1</li>\n<li>In the last case, the value returned is <em>null</em> because of this bug. The bug occurs when two or more consecutive optional URL parameters don’t have values specified for URL generation.</li>\n</ul>\n<p>Let’s look at the workaround first, then we’ll dive deeper into why this bug occurs.</p>\n<h2>The Workaround</h2>\n<p>The workaround is simple. To fix this issue, change the existing route to not have any optional parameters by removing the default values for month and day. This route now handles the first URL where month and day was specified.</p>\n<p>We then add a new route for the other two cases, but this route only has one optional month parameter.</p>\n<p>Here are the two routes after we’re done with these changes.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">routes.MapRoute(\"by-day\",         \n\n \"archive/{month}/{day}\",        \n\n new { controller = \"Home\", action = \"Index\"} ); \n\n routes.MapRoute(\"by-month\",          \"archive/{month}\",       \n\n  new { controller = \"Home\", action = \"Index\",      \n\n        month = UrlParameter.Optional} );</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>And now, we need to change the last two calls to generate URLs to use the <em>by-month</em> route.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">@Url.RouteUrl(\"by-day\", new { month = 1, day = 23 }) @Url.RouteUrl(\"by-month\", new { month = 1 }) @Url.RouteUrl(\"by-month\", null)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Just to be clear, this bug affects all the URL generation methods in ASP.NET MVC. So if you were generating action links like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">@Html.ActionLink(\"sample\", \"Index\", \"Home\", new { month = 1, day = 23 }, null) \n\n@Html.ActionLink(\"sample\", \"Index\", \"Home\", new { month = 1}, null)\n\n @Html.ActionLink(\"sample\", \"Index\", \"Home\")</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The last one would be broken without the workaround just provided.</p>\n<p>The workaround is not too bad if you happen to follow the practice of centralizing your URL generation. For example, the developers building <a href=\"http://forums.asp.net/\">http://forums.asp.net/</a> ran into this problem as well during the upgrade to ASP.NET MVC 3. But rather than having calls to</p>\n<p>ActionLink all over their views, they have calls to methods that are specific to their</p>\n<p>application domain such as ForumDetailUrl. This allowed them to workaround this issue by updating a single method.</p>\n<h2>The Root Cause</h2>\n<p>For the insanely curious, let’s look at the root cause of this bug. Going back to the original route defined at the top of this post, we never tried generating an URL where only the <em>second</em> optional parameter was specified.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">@Url.RouteUrl(\"by-day\", new { day = 23 })</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>This call really should fail because we didn’t specify a value for the first optional parameter, month. If it’s not clear why it should fail, suppose we allowed this to succeed, what URL would it generate? <em>/archive/23</em>? Well that’s obviously not correct because when a request is made for that URL, 23 will be interpreted to be the month, not the date.</p>\n<p>In ASP.NET MVC 2, if you made this call, you ended up</p>\n<p>with /archive/System.Web.Mvc.UrlParameter/23. UrlParameter.Optional</p>\n<p>is a class introduced by ASP.NET MVC 2 which ships on its own schedule outside of the core ASP.NET Framework. What that means is we added this new class which provided this new behavior in ASP.NET MVC, but core routing didn’t know about it.</p>\n<p>The way we fixed this in ASP.NET MVC 3 was to make the ToString method of UrlParameter.Optional return an empty string. That solved this bug, but uncovered a bug in <em>core routing</em> where a route with optional parameters having default values behaves incorrectly when two of them don’t have values specified during URL generation. Sound familiar?</p>\n<p>In hindsight, I think it was a mistake to take this fix because it caused a regression for many applications that had worked around the bug. The bug was found very late in our ship cycle and this is just one of the many challenging decisions we make when building software that sometimes don’t work out the way you hoped or expected. All we can do is learn from it and let the experience factor into the next time we are faced with such a dilemma.</p>\n<p>The good news is we have bugs logged against this behavior in core ASP.NET Routing so hopefully this will all get resolved in the next core .NET framework release.</p>","frontmatter":{"title":"Routing Regression With Two Consecutive Optional Url Parameters–(source Phil Haack)","date":"February 21, 2011"}}},"pageContext":{"slug":"/blog/2011-02-21-routing-regression-with-two-consecutive-optional-url-parameters-source-phil-haack-/"}},"staticQueryHashes":["2326376460","63159454"],"slicesMap":{}}