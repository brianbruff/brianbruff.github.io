{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2011-03-08-linq/","result":{"data":{"markdownRemark":{"html":"<p>This is just a quick sample to show you can use Linq in 2 different yet identical ways.</p>\n<p>The task is to show the count of people that have the same ages in our sample input data</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">   1:  class Program\n\n   2:      {\n\n   3:          class Person\n\n   4:          {\n\n   5:              public string Name { get; set; }\n\n   6:              public int Age { get; set; }\n\n   7:          }\n\n   8:          static void Main(string[] args)\n\n   9:          {\n\n  10:              // some test data\n\n  11:              var info = new List {\n\n  12:                  new Person { Name = \"Brian\", Age = 34 }, new Person { Name = \"Dee\", Age = 29 },                \n\n  13:                  new Person { Name = \"Bob\", Age = 21 }, new Person { Name = \"Dave\", Age = 25 },\n\n  14:                  new Person { Name = \"Tim\", Age = 33 }, new Person { Name = \"Jacques\", Age = 43 },\n\n  15:                  new Person { Name = \"Simon\", Age = 33 }, new Person { Name = \"Jame\", Age = 34 },\n\n  16:                  new Person { Name = \"Jason\", Age = 34 }, new Person { Name = \"Niamh\", Age = 34 }};\n\n  17:              \n\n  18:              var duplicates = from p in info\n\n  19:                               group p by p.Age into g\n\n  20:                               where g.Count() > 1\n\n  21:                               select g;\n\n  22:              Print(duplicates);            \n\n  23:   \n\n  24:              var dups = info.GroupBy(p => p.Age).Where(p => p.Count() > 1);\n\n  25:              Print(duplicates);\n\n  26:          }\n\n  27:   \n\n  28:          static void Print(IEnumerableint, Person>> obj)\n\n  29:          {\n\n  30:              obj.ToList().ForEach(p => Console.WriteLine(p.Key + \":\" + p.Count()));\n\n  31:          }\n\n  32:      }</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><img src=\"/images//blog/image.axd?picture=image_thumb_36.png\" alt=\"\"></p>","frontmatter":{"title":"Linq","date":"March 08, 2011"}}},"pageContext":{"slug":"/blog/2011-03-08-linq/"}},"staticQueryHashes":["2326376460","63159454"],"slicesMap":{}}