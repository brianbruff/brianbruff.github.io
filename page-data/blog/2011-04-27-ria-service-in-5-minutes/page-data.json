{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2011-04-27-ria-service-in-5-minutes/","result":{"data":{"markdownRemark":{"html":"<p>Hi all,</p>\n<p>I’ve previously blogged about how mind blowing WCF RIA Services are <a href=\"/blog/post/2010/03/15/RIA-Services.aspx\">here</a></p>\n<p>This week i found myself working with RIA Services again and this time I’ve got to show you just how easy it is (is case you didn’t take my advise and go look it up <img src=\"/blog/image.axd?picture=wlEmoticon-punk.png\" alt=\"Punk\"></p>\n<p>So, fire up VS2010 and create a new Silverlight Business Application</p>\n<p><img src=\"/images//blog/image.axd?picture=image_thumb_49.png\" alt=\"\"></p>\n<p>Two projects will be created for you, the Web project is where your DataAccess and Business logic lies, the other project is your Silverlight application.</p>\n<p>Create an entity framework model ORM for your data (you know how to do this right?)</p>\n<p>Next create a new Domain Service Class in the Web/Services folder</p>\n<p><img src=\"/images//blog/image.axd?picture=image_thumb_50.png\" alt=\"\"></p>\n<p><img src=\"/images//blog/image.axd?picture=image_thumb_51.png\" alt=\"\"></p>\n<p>Compile.. that’s your server ready to serve up your data.</p>\n<p>Now lets move into the Silverlight app, and add the following mark-up to your xaml</p>\n<p>First add the domain datasource, set it to auto load and set the Query name to the name of the query that has been injected into your client app, (let intellisense help you; it will be in the Web.Services namespace context object.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">        \"dataPads\" LoadSize=\"20\" AutoLoad=\"True\" QueryName=\"GetPadocks\"></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Add a datagrid use ElementBinding to the domainDataSource above (i’ve also put it in a telerik busyindicator to provide feedback that the data is loading)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">&lt;telerik:RadBusyIndicator IsBusy=\"{Binding ElementName=dataPads, Path=IsLoadingData}\">\n\n    &lt;dataControls:DataGrid x:Name=\"padocksGrid\" MinHeight=\"100\"\n\n         ItemsSource=\"{Binding ElementName=dataPads, Path=Data}\"  />\n\ntelerik:RadBusyIndicator></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Ok I’ve once again skimped on some of the detail but it’s a really nifty approach and i encourage you to give it a go.</p>\n<p>(Also seeming your service is a DomainContext you can expose your data as OData a post for another day <img src=\"/blog/image.axd?picture=wlEmoticon-secrettellingsmile_1.png\" alt=\"Secret telling smile\"> )</p>","frontmatter":{"title":"RIA Service in 5 minutes","date":"April 27, 2011"}}},"pageContext":{"slug":"/blog/2011-04-27-ria-service-in-5-minutes/"}},"staticQueryHashes":["2326376460","63159454"],"slicesMap":{}}