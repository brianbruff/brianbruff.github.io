{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2011-02-23-sqldatasource-strict-concurrency-checking-simplistic-approach/","result":{"data":{"markdownRemark":{"html":"<p>Lets say you have simple UPDATE command</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">UpdateCommand=\"Update SEC_USERS SET FirstName=@FirstName, Department = @Department, Gender = @Gender”</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Now, lets assume that two end users of your system have already requested information for SEC_USER Bill whose a male janitor.</p>\n<p>End user 1 updates Bills Department as he’s been promoted to CEO (hey it not impossible!).<br>\nEnd user 2 changes Bills Gender to female.</p>\n<p>What actually ends up happening is the End user 2 overwrites the promotion and Bill (or maybe billie now ) ends up as a female janitor.</p>\n<p>So how can we solve this problem assuming we are using a SqlDataSource.</p>\n<h4>Here’s how:</h4>\n<p><img src=\"/images//blog/image.axd?picture=image_thumb_24.png\" alt=\"\"></p>\n<ul>\n<li>\n<p>Set the ConflictDetection property to CompareAllValues</p>\n</li>\n<li>\n<p>Set the OldValuesParameterFormatString to xxxx_{0}</p>\n</li>\n<li>\n<p>Update your command with a WHERE restriction for XXXX_{0}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">UpdateCommand= \"Update SEC_USERS SET FirstName=@FirstName, Department = @Department, Gender = @Gender FROM SEC_USERS WHERE [FirstName=@read_FirstName](mailto:FirstName=@read_FirstName)\n\n AND Department=@read_Department AND Gender=@read_Gender\"</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n</li>\n</ul>\n<p>That’s it, the SqlDataSource manages the read_xxx parameters so you don’t have to.</p>","frontmatter":{"title":"SqlDatasource Strict Concurrency Checking–Simplistic approach","date":"February 23, 2011"}}},"pageContext":{"slug":"/blog/2011-02-23-sqldatasource-strict-concurrency-checking-simplistic-approach/"}},"staticQueryHashes":["2326376460","63159454"],"slicesMap":{}}