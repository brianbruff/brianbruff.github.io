{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2012-04-07-using-ravendb-with-mvc-webapi/","result":{"data":{"markdownRemark":{"html":"<p>I’m starting this post with a disclaimer. I’m not a RavenDb expect, actually far from it, in fact I’ve only started working with it this evening!</p>\n<p>I’m working on a pet project and getting the initial building blocks in place. I read about RavenDB in a recent edition of CODE magazine. The same magazine dealt with some other NoSql databases, e.g. Mongo Db, I’ve had a passing interest in NoSql in the last while so I wanted to get me a piece of the pie, and RavenDB jumped out at me for a few reasons.</p>\n<ul>\n<li>Written in .NET</li>\n<li>Scalability over RDBMS</li>\n<li>RestAPI (although i won’t be using it, my app will have its own REST API using RavenDb managed api underneath)</li>\n<li>.NET API with Linq querying</li>\n<li>Automatic indexing</li>\n<li>Scalability</li>\n</ul>\n<p>So lets get started, We want to follow what’s advised in this article: <a href=\"http://ravendb.net/kb/3/using-ravendb-in-an-asp-net-mvc-website\">http://ravendb.net/kb/3/using-ravendb-in-an-asp-net-mvc-website</a> however we will be using an ApiController not your standard Controller so we have to modify the solution a little.</p>\n<h2>Create project</h2>\n<p>Fire up visual studio and create an new MVC4 project</p>\n<p><img src=\"/images/./image.axd?picture=1.png\" alt=\"\"></p>\n<h2>Add the RavenDb package,</h2>\n<p><img src=\"/images/./image.axd?picture=2.png\" alt=\"\"></p>\n<h2>Global.asax.cs</h2>\n<p>Do the very same that is indicated on the Raven website, We need a single Document Store in our application.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\"> protected void Application_Start()\n        {\n            AreaRegistration.RegisterAllAreas();\n                        \n            RegisterGlobalFilters(GlobalFilters.Filters);\n            RegisterRoutes(RouteTable.Routes);\n\n            BundleTable.Bundles.RegisterTemplateBundles();\n\n            InitRaven();\n        }\n\n        private void InitRaven()\n        {\n            Store = new DocumentStore { ConnectionStringName = \"RavenDB\" };\n            Store.Initialize();\n\n            IndexCreation.CreateIndexes(Assembly.GetCallingAssembly(), Store);\n\n        }\n\n        public static DocumentStore Store;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Create RavenController</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">public abstract class RavenController : ApiController\n    {\n        public RavenController()\n        {\n            this.AutoSave = true;\n            RavenSession = TickTockBaby.Mvc.WebApiApplication.Store.OpenSession();\n        }\n\n        public bool AutoSave { get; set; }\n\n        public IDocumentSession RavenSession { get; protected set; }\n\n        protected override void Dispose(bool disposing)\n        {\n            if (disposing)\n            {\n                if (RavenSession != null)\n                {\n                    using (RavenSession)\n                    {\n                        if (this.AutoSave)\n                            RavenSession.SaveChanges();\n                        RavenSession.Dispose();\n                        RavenSession = null;\n                    }\n                }\n            }\n\n            base.Dispose(disposing);\n        } \n    }</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Let me explain what I’ve done here…</p>\n<p>I’ve initialized the session in the constructor, and cleaned it up in dispose, I also SaveChanges by default unless it gets switched off in a derived class.</p>\n<h2>Derive from RavenController</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">public class UsersController : RavenController\n    {       \n        // GET /api/values\n        public IEnumerable&lt;string> Get()\n        {\n            this.AutoSave = false;\n            return RavenSession.Query&lt;User>().Select(u => u.Name);            \n        }        \n    }</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>That’s my initial attempt, hope it helps someone out a little.</p>\n<p>I’ll post my final solution possibly using Ninject DI after I’ve used RavenDb for a while and get a better feel for it.</p>\n<h2>Raven Studio</h2>\n<p><img src=\"/images/./image.axd?picture=3.png\" alt=\"\"></p>\n<h2>Check results in browser</h2>\n<p><img src=\"/images/./image.axd?picture=4.png\" alt=\"\"></p>","frontmatter":{"title":"Using RavenDb with Mvc WebApi","date":"April 07, 2012"}}},"pageContext":{"slug":"/blog/2012-04-07-using-ravendb-with-mvc-webapi/"}},"staticQueryHashes":["2326376460","63159454"],"slicesMap":{}}