{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2013-07-31-parameterized-unit-tests-with-junit/","result":{"data":{"markdownRemark":{"html":"<p>I’ve been shown a lovely little utility for testing with JUnit 4.11 whereby one can have a list of items performed as part of the single unit test.</p>\n<p>First set add the annotations you see below and set your inputs and expected outputs. (Arrange and Assert)<br>\n<img src=\"/images/./image.axd?picture=image_thumb_265.png\" alt=\"\"></p>\n<p>Then create a constructor and some static variables to store each Tuple</p>\n<p><img src=\"/images/./image.axd?picture=image_thumb_266.png\" alt=\"\"></p>\n<p>Then define your single unit test (the business logic is your Action)</p>\n<p><img src=\"/images/./image.axd?picture=image_thumb_267.png\" alt=\"\"></p>\n<p>That’s it, a really nice way to have a single unit test that can be run multiple times with different parameters.</p>\n<p><img src=\"/images/./image.axd?picture=image_thumb_268.png\" alt=\"\"></p>\n<p>If you would like to do the same sort of testing in .net you have some choices to make.</p>\n<p>you could use NUnit and use the TestCaseAttribute</p>\n<p><img src=\"/images/./image.axd?picture=image_thumb_269.png\" alt=\"\"></p>\n<p>Of if like me you prefer MSTest then you can opt for a data driven unit test.<br>\nSee this vs2013 page (has worked at least since vs2010) :<br>\n<a href=\"http://msdn.microsoft.com/en-US/library/ms182527(v=vs.120)\"><em>http://msdn.microsoft.com/en-US/library/ms182527(v=vs.120)</em></a></p>\n<p><img src=\"/images/./image.axd?picture=image_thumb_270.png\" alt=\"\"></p>","frontmatter":{"title":"Parameterized Unit Tests with JUnit","date":"July 31, 2013"}}},"pageContext":{"slug":"/blog/2013-07-31-parameterized-unit-tests-with-junit/"}},"staticQueryHashes":["2326376460","63159454"],"slicesMap":{}}