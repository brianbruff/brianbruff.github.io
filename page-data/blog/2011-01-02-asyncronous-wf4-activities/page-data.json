{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2011-01-02-asyncronous-wf4-activities/","result":{"data":{"markdownRemark":{"html":"<p>Anyone that's ever written UX/GUI code will know that while it once was acceptable (unavoidable) to block the UX thread with long running operations, it's now almost always done in a background thread/task etc.</p>\n<p>Well with WF4 it's pretty much the same story, it's not the best idea to block the workflow thread while preforming longing running operations.</p>\n<p>Take the following example, where I make a webservice call to a server for some information, webservices can take quite some time depending on network load latency etc.</p>\n<p>public sealed class GetCurveTenor : AsyncCodeActivity</p>\n<p>{</p>\n<p>public InArgument<string> CurveUri { get; set; }</p>\n<p>public OutArgument&#x3C;Dictionary&#x3C;DateTime, double>> CurveDetail { get; set; }</p>\n<p>protected override IAsyncResult BeginExecute(</p>\n<p>AsyncCodeActivityContext context, AsyncCallback callback,</p>\n<p>object state)</p>\n<p>{</p>\n<p>Func&#x3C;string, Dictionary&#x3C;DateTime, double>> asyncWork =</p>\n<p>curveUri => RetrieveCurveDetail(curveUri);</p>\n<p>context.UserState = asyncWork;</p>\n<p>return asyncWork.BeginInvoke(</p>\n<p>CurveUri.Get(context), callback, state);</p>\n<p>}</p>\n<p>protected override void EndExecute(</p>\n<p>AsyncCodeActivityContext context, IAsyncResult result)</p>\n<p>{</p>\n<p>Dictionary&#x3C;DateTime, double> curveDetail =</p>\n<p>((Func&#x3C;Int32, Dictionary&#x3C;DateTime, double>>)</p>\n<p>context.UserState).EndInvoke(result);</p>\n<p>if (curveDetail != null)</p>\n<p>{</p>\n<p>CurveDetail.Set(context, curveDetail);</p>\n<p>}</p>\n<p>}</p>\n<p>private Dictionary&#x3C;DateTime, double> RetrieveCurveDetail(string curveUri)</p>\n<p>{</p>\n<p>Dictionary&#x3C;DateTime, double> result = new Dictionary&#x3C;DateTime, double>();</p>\n<p>// Do server stuff ...</p>\n<p>return result;</p>\n<p>}</p>\n<p>}</p>\n<p>Most of the code above should be self explanatory.<br>\nIf you've not seen the \"Func\" syntax before it's basically just a delegate defined like this (in .NET 4)</p>\n<p>public delegate TResult Func&#x3C;in T, out TResult>(T arg); (Note the .NET 4 in modifier to indicate contravariance)</p>\n<p>I've used lambdas to point to delegate towards the RetrieveCurveDetails function, it's this function that gets executed on the background thread.</p>\n<p>Hope this has been of some assistance.</p>","frontmatter":{"title":"Asyncronous WF4 activities","date":"January 02, 2011"}}},"pageContext":{"slug":"/blog/2011-01-02-asyncronous-wf4-activities/"}},"staticQueryHashes":["2326376460","63159454"],"slicesMap":{}}