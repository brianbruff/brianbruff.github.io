{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2011-12-04-synchronize-you-controllers-when-necessary/","result":{"data":{"markdownRemark":{"html":"<p>Earlier today I happened to lend a hand to a friend of mine that was experiencing a race condition in an ASP.MVC application, like a rag to a bull is multithreading to me.</p>\n<p>Here’s the scenario; my friend was calling two web services using methods like BeginXXX/EndXXX. Because her website was IO bound she was correctly using an AsyncController.</p>\n<p>She called method to increment the outstanding operations by 2, then proceeded to call</p>\n<blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">service1.BeginGetValuations(v, ar => {\n\n\n    AsyncManager.Parameters[\"valuations\"] = service1.EndGetValuations();\n\n\n    AsyncManager.OutstandingOperations.Decrement();\n\n\n}, null);\n\n\n    \n\n\nservice2.BeginGetValuations(v, ar => {\n\n\n    AsyncManager.Parameters[\"valuationsActual\"] = service2.EndGetValuations();\n\n\n    AsyncManager.OutstandingOperations.Decrement();\n\n\n},null);</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</blockquote>\n<p>Looked pretty much ok, except once in a while when load tested the valuationsActual parameter was null.<br>\nSo what could be the cause… Well basically it turned out that there was a race condition accessing the dictionary from two threads.</p>\n<h3>The solution:</h3>\n<p>synchronize access to the Parameters, i first thought of doing this with a plain old lock but I was worried about other access on the parameters from the framework itself so I had a quick read of the documentation and turns out that the AsyncManager has a sync method.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">service1.BeginGetValuations(v, ar => {\n\n    AsyncManager.Sync(() => {\n\n        AsyncManager.Parameters[\"valuations\"] = service1.EndGetValuations();\n\n        AsyncManager.OutstandingOperations.Decrement();\n\n    });\n\n}, null);</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Do the same for service2.</p>","frontmatter":{"title":"Synchronize you controllers when necessary","date":"December 04, 2011"}}},"pageContext":{"slug":"/blog/2011-12-04-synchronize-you-controllers-when-necessary/"}},"staticQueryHashes":["2326376460","63159454"],"slicesMap":{}}