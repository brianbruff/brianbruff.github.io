<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>brianbruff</author>
  <title>Flexing those Java generic PECS</title>
  <description />
  <content>  &lt;p&gt;I believe I’ve previously covered c# generics covariance and contravariance in the past, now it’s javas turn&lt;/p&gt;    &lt;p&gt;As you may or may not know &lt;/p&gt;  &lt;p&gt;The term PECS stands for “Producer Extends, Consumer Super,” which is an odd acronym coined by Joshua Block in his Effective Java book, but provides a mnemonic on what to do. It means that if a parameterized type represents a producer, use extends. If it represents a consumer, use super. If the parameter is both, don’t use wildcards at all—the only type that satisfies both requirements is the explicit type itself.&lt;/p&gt;  &lt;p&gt;Covariance in java uses the extends keyword (yes even with interfaces), e.g. List&amp;lt;? extends Number&amp;gt; accommodates all types that derive from Number&lt;/p&gt;  &lt;p&gt;   &lt;br /&gt;Contravariance on the other hand uses the super keyword e.g. List&amp;lt;? super Number&amp;gt; accommodates all the types that Number derives from and of course number itself.&lt;/p&gt;  &lt;p&gt;So what exactly is PECS recommending we do?&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Use extends when you only get values out of a data structure&lt;/li&gt;    &lt;li&gt;Use super when you only put values into a data structure&lt;/li&gt;    &lt;li&gt;Use the exact type when you plan on doing both&lt;/li&gt; &lt;/ul&gt;</content>
  <ispublished>True</ispublished>
  <isdeleted>False</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2019-05-01 22:27:07</pubDate>
  <lastModified>2019-05-01 22:27:07</lastModified>
  <raters>0</raters>
  <rating>0</rating>
  <slug>Flexing-those-Java-generic-PECS</slug>
  <tags />
  <comments />
  <categories />
  <notifications />
</post>