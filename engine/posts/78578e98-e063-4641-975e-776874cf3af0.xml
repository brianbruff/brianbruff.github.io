<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>brianbruff</author>
  <title>RESTful WCF Services</title>
  <description />
  <content>&lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;WCF not only provides SOAP, it’s also capable of providing RESTful services through use of the WebGet and WebInvoke attributes in the System.ServiceModel.Web assembly in conjunction with the webHttpBinding and webHttp behaviour. In fact, WebGet/WebInvoke are not really required required (however PUT is the default Http Verb and you won’t be able to specify what methods correspond to urls.&lt;/p&gt;  &lt;p&gt;Here’s a sample;&lt;/p&gt;  &lt;div class="csharpcode"&gt;   &lt;pre class="alt"&gt;[ServiceContract]&lt;/pre&gt;

  &lt;pre&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;interface&lt;/span&gt; IPersonInfo&lt;/pre&gt;

  &lt;pre class="alt"&gt;    {&lt;/pre&gt;

  &lt;pre&gt;        [OperationContract]&lt;/pre&gt;

  &lt;pre class="alt"&gt;        [WebGet(UriTemplate = &lt;span class="str"&gt;&amp;quot;/Details&amp;quot;&lt;/span&gt;)]&lt;/pre&gt;

  &lt;pre&gt;        &lt;span class="kwrd"&gt;string&lt;/span&gt; Details();&lt;/pre&gt;

  &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

  &lt;pre&gt;        [OperationContract]&lt;/pre&gt;

  &lt;pre class="alt"&gt;        [WebGet(UriTemplate = &lt;span class="str"&gt;&amp;quot;/Person&amp;quot;&lt;/span&gt;)]&lt;/pre&gt;

  &lt;pre&gt;        Person GetRandomPerson();&lt;/pre&gt;

  &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

  &lt;pre&gt;        [OperationContract]&lt;/pre&gt;

  &lt;pre class="alt"&gt;        [WebGet(UriTemplate = &lt;span class="str"&gt;&amp;quot;/Person?format=xml&amp;quot;&lt;/span&gt;, ResponseFormat = WebMessageFormat.Xml)]&lt;/pre&gt;

  &lt;pre&gt;        Person GetRandomPersonXml();&lt;/pre&gt;

  &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

  &lt;pre&gt;        [OperationContract]&lt;/pre&gt;

  &lt;pre class="alt"&gt;        [WebGet(UriTemplate = &lt;span class="str"&gt;&amp;quot;/Person?format=json&amp;quot;&lt;/span&gt;, ResponseFormat = WebMessageFormat.Json)]&lt;/pre&gt;

  &lt;pre&gt;        Person GetRandomPersonJson();&lt;/pre&gt;

  &lt;pre class="alt"&gt;    }&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;div class="csharpcode"&gt;
  &lt;pre class="alt"&gt;[ServiceBehavior(InstanceContextMode = InstanceContextMode.Single)]&lt;/pre&gt;

  &lt;pre&gt;    &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; PersonService : IPersonInfo&lt;/pre&gt;

  &lt;pre class="alt"&gt;    {&lt;/pre&gt;

  &lt;pre&gt;        &lt;span class="kwrd"&gt;public&lt;/span&gt; &lt;span class="kwrd"&gt;string&lt;/span&gt; Details()&lt;/pre&gt;

  &lt;pre class="alt"&gt;        {&lt;/pre&gt;

  &lt;pre&gt;            WebOperationContext.Current.OutgoingResponse.StatusCode = System.Net.HttpStatusCode.OK;&lt;/pre&gt;

  &lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="str"&gt;&amp;quot;Mon-Fri 9am to 5pm&amp;quot;&lt;/span&gt;;&lt;/pre&gt;

  &lt;pre&gt;        }&lt;/pre&gt;

  &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

  &lt;pre&gt;        &lt;span class="kwrd"&gt;public&lt;/span&gt; Person GetRandomPerson()&lt;/pre&gt;

  &lt;pre class="alt"&gt;        {&lt;/pre&gt;

  &lt;pre&gt;            &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;new&lt;/span&gt; Person { Address = &lt;span class="str"&gt;&amp;quot;Limerick&amp;quot;&lt;/span&gt;, Name = &lt;span class="str"&gt;&amp;quot;Brian&amp;quot;&lt;/span&gt;, Country = &lt;span class="str"&gt;&amp;quot;Ireland&amp;quot;&lt;/span&gt; }; &lt;span class="rem"&gt;// not so random..&lt;/span&gt;&lt;/pre&gt;

  &lt;pre class="alt"&gt;        }&lt;/pre&gt;

  &lt;pre&gt;&amp;#160;&lt;/pre&gt;

  &lt;pre class="alt"&gt;        &lt;span class="kwrd"&gt;public&lt;/span&gt; Person GetRandomPersonXml()&lt;/pre&gt;

  &lt;pre&gt;        {&lt;/pre&gt;

  &lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;new&lt;/span&gt; Person { Address = &lt;span class="str"&gt;&amp;quot;Limerick&amp;quot;&lt;/span&gt;, Name = &lt;span class="str"&gt;&amp;quot;Brian&amp;quot;&lt;/span&gt;, Country = &lt;span class="str"&gt;&amp;quot;Ireland&amp;quot;&lt;/span&gt; }; &lt;span class="rem"&gt;// not so random..&lt;/span&gt;&lt;/pre&gt;

  &lt;pre&gt;        }&lt;/pre&gt;

  &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

  &lt;pre&gt;        &lt;span class="kwrd"&gt;public&lt;/span&gt; Person GetRandomPersonJson()&lt;/pre&gt;

  &lt;pre class="alt"&gt;        {&lt;/pre&gt;

  &lt;pre&gt;            &lt;span class="kwrd"&gt;return&lt;/span&gt; &lt;span class="kwrd"&gt;new&lt;/span&gt; Person { Address = &lt;span class="str"&gt;&amp;quot;Limerick&amp;quot;&lt;/span&gt;, Name = &lt;span class="str"&gt;&amp;quot;Brian&amp;quot;&lt;/span&gt;, Country = &lt;span class="str"&gt;&amp;quot;Ireland&amp;quot;&lt;/span&gt; }; &lt;span class="rem"&gt;// not so random..&lt;/span&gt;&lt;/pre&gt;

  &lt;pre class="alt"&gt;        }&lt;/pre&gt;

  &lt;pre&gt;    }&lt;/pre&gt;
&lt;/div&gt;
&lt;style type="text/css"&gt;
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }&lt;/style&gt;

&lt;p&gt;Host this service in IIS for example and you’ll be able to get the following results&lt;/p&gt;

&lt;p&gt;&lt;a href="/blog/image.axd?picture=image_38.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="/blog/image.axd?picture=image_thumb_38.png" width="665" height="454" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;As REST support only arrived in WCF 3.5 there is still a lack of support in certain areas, e.g. error handling, caching etc; what I’ve seen done in practise is people continue to use the REST Starter kit from codeplex.&lt;/p&gt;</content>
  <ispublished>True</ispublished>
  <isdeleted>False</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2011-04-19 18:47:16</pubDate>
  <lastModified>2011-04-19 18:47:16</lastModified>
  <raters>0</raters>
  <rating>0</rating>
  <slug>RESTful-WCF-Services</slug>
  <tags />
  <comments />
  <categories />
  <notifications />
</post>