<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>brianbruff</author>
  <title>C++ 11–shared_ptr</title>
  <description />
  <content>&lt;p&gt;To be honest, it’s been a long time since I did any real c++, however I’ve been reading a Java book lately and it’s made me kinda lonesome for C++, the Java book goes into a lot of detail about core language structure, it’s not a book on hibernate, swing etc, just core fundamentals like differences between an internal private class or an internal private interface, static binding of fields etc. I remember when I was at the height of my c++ development career I knew the intricacies about default parameters being statically bound in polymorphic classes, I knew about private inheritance, pitfalls of overriding non virtual functions, thinking back I knew the language quite intimately. Sure in the .net world I know quite a lot of the framework and the libraries toolsets etc (because i’m a greedy little pig and want to know everything) but, I wonder do i know the c# language quite as well as I once knew c++. &lt;/p&gt;  &lt;p&gt;As I said at the outset I’ve been away from c++ for a few years now, I think the last time I did any commercial c++ was in 2006 when I was up to my eyeballs in boost/stl/wtl/atl etc, so what’s changed? Well there’s a new standard for one, &lt;strong&gt;C++11&lt;/strong&gt;. Just to keep my finger in I’ve decided to start writing a few little blog posts on the new standard, this is the first one.&lt;/p&gt;  &lt;p&gt;In Boost we used to used shared_ptr this class template stored a pointer to a dynamically allocated object, the object pointed to was guaranteed to be deleted when the last shared_ptr pointing to it was destroyed or reset.&lt;/p&gt;  &lt;p&gt;e.g.&lt;/p&gt;  &lt;div class="csharpcode"&gt;   &lt;pre class="alt"&gt;#include &amp;lt;vector&amp;gt;&lt;/pre&gt;

  &lt;pre&gt;#include &amp;lt;set&amp;gt;&lt;/pre&gt;

  &lt;pre class="alt"&gt;#include &amp;lt;iostream&amp;gt;&lt;/pre&gt;

  &lt;pre&gt;#include &amp;lt;algorithm&amp;gt;&lt;/pre&gt;

  &lt;pre class="alt"&gt;#include &amp;lt;boost/shared_ptr.hpp&amp;gt;&lt;/pre&gt;

  &lt;pre&gt;&amp;#160;&lt;/pre&gt;

  &lt;pre class="alt"&gt;&lt;span class="rem"&gt;//  The application will produce a series of&lt;/span&gt;&lt;/pre&gt;

  &lt;pre&gt;&lt;span class="rem"&gt;//  objects of type Foo which later must be&lt;/span&gt;&lt;/pre&gt;

  &lt;pre class="alt"&gt;&lt;span class="rem"&gt;//  accessed both by occurrence (std::vector)&lt;/span&gt;&lt;/pre&gt;

  &lt;pre&gt;&lt;span class="rem"&gt;//  and by ordering relationship (std::set).&lt;/span&gt;&lt;/pre&gt;

  &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

  &lt;pre&gt;&lt;span class="kwrd"&gt;struct&lt;/span&gt; Foo&lt;/pre&gt;

  &lt;pre class="alt"&gt;{ &lt;/pre&gt;

  &lt;pre&gt;  Foo( &lt;span class="kwrd"&gt;int&lt;/span&gt; _x ) : x(_x) {}&lt;/pre&gt;

  &lt;pre class="alt"&gt;  ~Foo() { std::cout &amp;lt;&amp;lt; &lt;span class="str"&gt;&amp;quot;Destructing a Foo with x=&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; x &amp;lt;&amp;lt; &lt;span class="str"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;; }&lt;/pre&gt;

  &lt;pre&gt;  &lt;span class="kwrd"&gt;int&lt;/span&gt; x;&lt;/pre&gt;

  &lt;pre class="alt"&gt;  &lt;span class="rem"&gt;/* ... */&lt;/span&gt;&lt;/pre&gt;

  &lt;pre&gt;};&lt;/pre&gt;

  &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

  &lt;pre&gt;typedef boost::shared_ptr&amp;lt;Foo&amp;gt; FooPtr;&lt;/pre&gt;

  &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

  &lt;pre&gt;&lt;span class="kwrd"&gt;struct&lt;/span&gt; FooPtrOps&lt;/pre&gt;

  &lt;pre class="alt"&gt;{&lt;/pre&gt;

  &lt;pre&gt;  &lt;span class="kwrd"&gt;bool&lt;/span&gt; &lt;span class="kwrd"&gt;operator&lt;/span&gt;()( &lt;span class="kwrd"&gt;const&lt;/span&gt; FooPtr &amp;amp; a, &lt;span class="kwrd"&gt;const&lt;/span&gt; FooPtr &amp;amp; b )&lt;/pre&gt;

  &lt;pre class="alt"&gt;    { &lt;span class="kwrd"&gt;return&lt;/span&gt; a-&amp;gt;x &amp;gt; b-&amp;gt;x; }&lt;/pre&gt;

  &lt;pre&gt;  &lt;span class="kwrd"&gt;void&lt;/span&gt; &lt;span class="kwrd"&gt;operator&lt;/span&gt;()( &lt;span class="kwrd"&gt;const&lt;/span&gt; FooPtr &amp;amp; a )&lt;/pre&gt;

  &lt;pre class="alt"&gt;    { std::cout &amp;lt;&amp;lt; a-&amp;gt;x &amp;lt;&amp;lt; &lt;span class="str"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;; }&lt;/pre&gt;

  &lt;pre&gt;};&lt;/pre&gt;

  &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

  &lt;pre&gt;&lt;span class="kwrd"&gt;int&lt;/span&gt; main()&lt;/pre&gt;

  &lt;pre class="alt"&gt;{&lt;/pre&gt;

  &lt;pre&gt;  std::vector&amp;lt;FooPtr&amp;gt;         foo_vector;&lt;/pre&gt;

  &lt;pre class="alt"&gt;  std::set&amp;lt;FooPtr,FooPtrOps&amp;gt;  foo_set; &lt;span class="rem"&gt;// NOT multiset!&lt;/span&gt;&lt;/pre&gt;

  &lt;pre&gt;&amp;#160;&lt;/pre&gt;

  &lt;pre class="alt"&gt;  FooPtr foo_ptr( &lt;span class="kwrd"&gt;new&lt;/span&gt; Foo( 2 ) );&lt;/pre&gt;

  &lt;pre&gt;  foo_vector.push_back( foo_ptr );&lt;/pre&gt;

  &lt;pre class="alt"&gt;  foo_set.insert( foo_ptr );&lt;/pre&gt;

  &lt;pre&gt;&amp;#160;&lt;/pre&gt;

  &lt;pre class="alt"&gt;  foo_ptr.reset( &lt;span class="kwrd"&gt;new&lt;/span&gt; Foo( 1 ) );&lt;/pre&gt;

  &lt;pre&gt;  foo_vector.push_back( foo_ptr );&lt;/pre&gt;

  &lt;pre class="alt"&gt;  foo_set.insert( foo_ptr );&lt;/pre&gt;

  &lt;pre&gt;&amp;#160;&lt;/pre&gt;

  &lt;pre class="alt"&gt;  foo_ptr.reset( &lt;span class="kwrd"&gt;new&lt;/span&gt; Foo( 3 ) );&lt;/pre&gt;

  &lt;pre&gt;  foo_vector.push_back( foo_ptr );&lt;/pre&gt;

  &lt;pre class="alt"&gt;  foo_set.insert( foo_ptr );&lt;/pre&gt;

  &lt;pre&gt;&amp;#160;&lt;/pre&gt;

  &lt;pre class="alt"&gt;  foo_ptr.reset ( &lt;span class="kwrd"&gt;new&lt;/span&gt; Foo( 2 ) );&lt;/pre&gt;

  &lt;pre&gt;  foo_vector.push_back( foo_ptr );&lt;/pre&gt;

  &lt;pre class="alt"&gt;  foo_set.insert( foo_ptr );&lt;/pre&gt;

  &lt;pre&gt;&amp;#160;&lt;/pre&gt;

  &lt;pre class="alt"&gt;  std::cout &amp;lt;&amp;lt; &lt;span class="str"&gt;&amp;quot;foo_vector:\n&amp;quot;&lt;/span&gt;;&lt;/pre&gt;

  &lt;pre&gt;  std::for_each( foo_vector.begin(), foo_vector.end(), FooPtrOps() );&lt;/pre&gt;

  &lt;pre class="alt"&gt;  &lt;/pre&gt;

  &lt;pre&gt;  std::cout &amp;lt;&amp;lt; &lt;span class="str"&gt;&amp;quot;\nfoo_set:\n&amp;quot;&lt;/span&gt;; &lt;/pre&gt;

  &lt;pre class="alt"&gt;  std::for_each( foo_set.begin(), foo_set.end(), FooPtrOps() );&lt;/pre&gt;

  &lt;pre&gt;  std::cout &amp;lt;&amp;lt; &lt;span class="str"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;;&lt;/pre&gt;

  &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

  &lt;pre&gt;&lt;span class="rem"&gt;//  Expected output:&lt;/span&gt;&lt;/pre&gt;

  &lt;pre class="alt"&gt;&lt;span class="rem"&gt;//&lt;/span&gt;&lt;/pre&gt;

  &lt;pre&gt;&lt;span class="rem"&gt;//   foo_vector:&lt;/span&gt;&lt;/pre&gt;

  &lt;pre class="alt"&gt;&lt;span class="rem"&gt;//   2&lt;/span&gt;&lt;/pre&gt;

  &lt;pre&gt;&lt;span class="rem"&gt;//   1&lt;/span&gt;&lt;/pre&gt;

  &lt;pre class="alt"&gt;&lt;span class="rem"&gt;//   3&lt;/span&gt;&lt;/pre&gt;

  &lt;pre&gt;&lt;span class="rem"&gt;//   2&lt;/span&gt;&lt;/pre&gt;

  &lt;pre class="alt"&gt;&lt;span class="rem"&gt;//   &lt;/span&gt;&lt;/pre&gt;

  &lt;pre&gt;&lt;span class="rem"&gt;//   foo_set:&lt;/span&gt;&lt;/pre&gt;

  &lt;pre class="alt"&gt;&lt;span class="rem"&gt;//   3&lt;/span&gt;&lt;/pre&gt;

  &lt;pre&gt;&lt;span class="rem"&gt;//   2&lt;/span&gt;&lt;/pre&gt;

  &lt;pre class="alt"&gt;&lt;span class="rem"&gt;//   1&lt;/span&gt;&lt;/pre&gt;

  &lt;pre&gt;&lt;span class="rem"&gt;//&lt;/span&gt;&lt;/pre&gt;

  &lt;pre class="alt"&gt;&lt;span class="rem"&gt;//   Destructing a Foo with x=2&lt;/span&gt;&lt;/pre&gt;

  &lt;pre&gt;&lt;span class="rem"&gt;//   Destructing a Foo with x=1&lt;/span&gt;&lt;/pre&gt;

  &lt;pre class="alt"&gt;&lt;span class="rem"&gt;//   Destructing a Foo with x=3&lt;/span&gt;&lt;/pre&gt;

  &lt;pre&gt;&lt;span class="rem"&gt;//   Destructing a Foo with x=2&lt;/span&gt;&lt;/pre&gt;

  &lt;pre class="alt"&gt;   &lt;/pre&gt;

  &lt;pre&gt;  &lt;span class="kwrd"&gt;return&lt;/span&gt; 0;&lt;/pre&gt;

  &lt;pre class="alt"&gt;}&lt;/pre&gt;
&lt;/div&gt;
&lt;style type="text/css"&gt;
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }&lt;/style&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;In c++ 11 we now get a shared pointer as part of the standard, see my example below.&lt;/p&gt;

&lt;p&gt;&lt;a href="/blog/image.axd?picture=image_74.png"&gt;&lt;img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="/blog/image.axd?picture=image_thumb_74.png" width="383" height="345" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I know there were some overheads to the boost shared pointer, memory footprint etc, (consider 1x10&lt;sup&gt;6). &lt;/sup&gt;of these guys in a container!. But in general shared_ptr can help you, because if you do it manually you’ll likely write slower, buggier code (or both).&lt;/p&gt;</content>
  <ispublished>True</ispublished>
  <isdeleted>False</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2011-08-04 13:52:34</pubDate>
  <lastModified>2011-08-04 13:52:34</lastModified>
  <raters>0</raters>
  <rating>0</rating>
  <slug>C++-11–shared_ptr</slug>
  <tags />
  <comments />
  <categories />
  <notifications />
</post>
