<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<post>
  <author>brianbruff</author>
  <title>Reading a file in windows 8 CPP vs CSharp</title>
  <description />
  <content>&lt;p&gt;I left my last blog very indecisive, would I use CPP, would I use .NET or would it be html/js.&lt;/p&gt;  &lt;p&gt;Again I’m thinking Cpp is really for faster and better performance, and while it might even be the hands down winner on ARM architecture, I don’t expect to see any performance differences in the app I’m going to write.&lt;/p&gt;  &lt;p&gt;I’m actually going to write the same application 3 times, and I’ll review my findings as I go along.   &lt;br /&gt;&lt;/p&gt;  &lt;p&gt;I’ll present the c++ and the c# apps here and the html/js will follow in the next blog post.&lt;/p&gt;  &lt;p&gt;First up was the cpp. To be honest I did find this painful to write, the syntax is pretty convoluted. At least the markup for cpp is Silverlight so that was a no brainer.&lt;/p&gt;  &lt;div class="csharpcode"&gt;   &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Grid&lt;/span&gt; &lt;span class="attr"&gt;x:Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;LayoutRoot&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Background&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;#FF0C0C0C&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

  &lt;pre&gt;    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;Button&lt;/span&gt; &lt;span class="attr"&gt;Content&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Open&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;HorizontalAlignment&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Left&amp;quot;&lt;/span&gt; &lt;/pre&gt;

  &lt;pre class="alt"&gt;         &lt;span class="attr"&gt;Height&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;4&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Margin&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;84,45,0,0&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;VerticalAlignment&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Top&amp;quot;&lt;/span&gt;&lt;/pre&gt;

  &lt;pre&gt;         &lt;span class="attr"&gt;Width&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;194&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Click&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Button_Click&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

  &lt;pre class="alt"&gt;    &lt;span class="kwrd"&gt;&amp;lt;&lt;/span&gt;&lt;span class="html"&gt;TextBlock&lt;/span&gt; &lt;span class="attr"&gt;HorizontalAlignment&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Left&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Height&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;381&amp;quot;&lt;/span&gt; &lt;/pre&gt;

  &lt;pre&gt;        &lt;span class="attr"&gt;Margin&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;282,45,0,0&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;Text&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;TextBox&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;VerticalAlignment&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;Top&amp;quot;&lt;/span&gt; &lt;/pre&gt;

  &lt;pre class="alt"&gt;        &lt;span class="attr"&gt;Width&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;1065&amp;quot;&lt;/span&gt; &lt;span class="attr"&gt;x:Name&lt;/span&gt;&lt;span class="kwrd"&gt;=&amp;quot;tb1&amp;quot;&lt;/span&gt;&lt;span class="kwrd"&gt;/&amp;gt;&lt;/span&gt;&lt;/pre&gt;

  &lt;pre&gt;&lt;span class="kwrd"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="html"&gt;Grid&lt;/span&gt;&lt;span class="kwrd"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;style type="text/css"&gt;
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }&lt;/style&gt;

&lt;p&gt;I’ll even use the same markup for the C# application.&lt;/p&gt;

&lt;p&gt;Now to the code&lt;/p&gt;

&lt;h2&gt;C++&lt;/h2&gt;

&lt;div class="csharpcode"&gt;
  &lt;pre class="alt"&gt;#include &lt;span class="str"&gt;&amp;quot;pch.h&amp;quot;&lt;/span&gt;&lt;/pre&gt;

  &lt;pre&gt;#include &lt;span class="str"&gt;&amp;quot;MainPage.xaml.h&amp;quot;&lt;/span&gt;&lt;/pre&gt;

  &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

  &lt;pre&gt;&lt;span class="kwrd"&gt;using&lt;/span&gt; &lt;span class="kwrd"&gt;namespace&lt;/span&gt; Windows::UI::Xaml;&lt;/pre&gt;

  &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;using&lt;/span&gt; &lt;span class="kwrd"&gt;namespace&lt;/span&gt; Windows::UI::Xaml::Controls;&lt;/pre&gt;

  &lt;pre&gt;&lt;span class="kwrd"&gt;using&lt;/span&gt; &lt;span class="kwrd"&gt;namespace&lt;/span&gt; Windows::UI::Xaml::Data;&lt;/pre&gt;

  &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;using&lt;/span&gt; &lt;span class="kwrd"&gt;namespace&lt;/span&gt; Windows::Storage;&lt;/pre&gt;

  &lt;pre&gt;&lt;span class="kwrd"&gt;using&lt;/span&gt; &lt;span class="kwrd"&gt;namespace&lt;/span&gt; Windows::Storage::Pickers;&lt;/pre&gt;

  &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;using&lt;/span&gt; &lt;span class="kwrd"&gt;namespace&lt;/span&gt; Windows::Storage::Streams;&lt;/pre&gt;

  &lt;pre&gt;&lt;span class="kwrd"&gt;using&lt;/span&gt; &lt;span class="kwrd"&gt;namespace&lt;/span&gt; Windows::Foundation;&lt;/pre&gt;

  &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;using&lt;/span&gt; &lt;span class="kwrd"&gt;namespace&lt;/span&gt; CppApplication17;&lt;/pre&gt;

  &lt;pre&gt;&amp;#160;&lt;/pre&gt;

  &lt;pre class="alt"&gt;MainPage::MainPage()&lt;/pre&gt;

  &lt;pre&gt;{&lt;/pre&gt;

  &lt;pre class="alt"&gt;    InitializeComponent();&lt;/pre&gt;

  &lt;pre&gt;}&lt;/pre&gt;

  &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

  &lt;pre&gt;MainPage::~MainPage()&lt;/pre&gt;

  &lt;pre class="alt"&gt;{&lt;/pre&gt;

  &lt;pre&gt;}&lt;/pre&gt;

  &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

  &lt;pre&gt;&lt;span class="kwrd"&gt;void&lt;/span&gt; CppApplication17::MainPage::Button_Click(Platform::Object^ sender, Windows::UI::Xaml::RoutedEventArgs^ e)&lt;/pre&gt;

  &lt;pre class="alt"&gt;{&lt;/pre&gt;

  &lt;pre&gt;&amp;#160;&lt;/pre&gt;

  &lt;pre class="alt"&gt;    auto openPicker = &lt;span class="kwrd"&gt;ref&lt;/span&gt; &lt;span class="kwrd"&gt;new&lt;/span&gt; FileOpenPicker();&lt;/pre&gt;

  &lt;pre&gt;    openPicker-&amp;gt;SuggestedStartLocation = PickerLocationId::Desktop;&lt;/pre&gt;

  &lt;pre class="alt"&gt;    openPicker-&amp;gt;FileTypeFilter-&amp;gt;Append(&lt;span class="str"&gt;&amp;quot;.log&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

  &lt;pre&gt;    auto pickOp = openPicker-&amp;gt;PickSingleFileAsync();&lt;/pre&gt;

  &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

  &lt;pre&gt;    TextBlock^ content = tb1;&lt;/pre&gt;

  &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

  &lt;pre&gt;    pickOp-&amp;gt;Completed = &lt;span class="kwrd"&gt;ref&lt;/span&gt; &lt;span class="kwrd"&gt;new&lt;/span&gt; AsyncOperationCompletedHandler&amp;lt;StorageFile^&amp;gt;(&lt;/pre&gt;

  &lt;pre class="alt"&gt;    [content](IAsyncOperation&amp;lt;StorageFile^&amp;gt;^ operation)&lt;/pre&gt;

  &lt;pre&gt;    {        &lt;/pre&gt;

  &lt;pre class="alt"&gt;        StorageFile^ file = operation-&amp;gt;GetResults();&lt;/pre&gt;

  &lt;pre&gt;        &lt;span class="kwrd"&gt;if&lt;/span&gt; (file)&lt;/pre&gt;

  &lt;pre class="alt"&gt;        {&lt;/pre&gt;

  &lt;pre&gt;            &lt;span class="rem"&gt;//content-&amp;gt;Text = file-&amp;gt;FileName;&lt;/span&gt;&lt;/pre&gt;

  &lt;pre class="alt"&gt;            auto openOp = file-&amp;gt;OpenForReadAsync();&lt;/pre&gt;

  &lt;pre&gt;            openOp-&amp;gt;Completed = &lt;span class="kwrd"&gt;ref&lt;/span&gt; &lt;span class="kwrd"&gt;new&lt;/span&gt; AsyncOperationCompletedHandler&amp;lt;IInputStream^&amp;gt;(&lt;/pre&gt;

  &lt;pre class="alt"&gt;            [content, file](IAsyncOperation&amp;lt;IInputStream^&amp;gt;^ readOperation)&lt;/pre&gt;

  &lt;pre&gt;            {&lt;/pre&gt;

  &lt;pre class="alt"&gt;                auto stream = readOperation-&amp;gt;GetResults();&lt;/pre&gt;

  &lt;pre&gt;                auto reader = &lt;span class="kwrd"&gt;ref&lt;/span&gt; &lt;span class="kwrd"&gt;new&lt;/span&gt; DataReader(stream);&lt;/pre&gt;

  &lt;pre class="alt"&gt;                auto loadOp = reader-&amp;gt;LoadAsync(file-&amp;gt;Size);&lt;/pre&gt;

  &lt;pre&gt;&amp;#160;&lt;/pre&gt;

  &lt;pre class="alt"&gt;                loadOp-&amp;gt;Completed = &lt;span class="kwrd"&gt;ref&lt;/span&gt; &lt;span class="kwrd"&gt;new&lt;/span&gt; AsyncOperationCompletedHandler&amp;lt;unsigned &lt;span class="kwrd"&gt;int&lt;/span&gt;&amp;gt;(&lt;/pre&gt;

  &lt;pre&gt;                [content, reader](IAsyncOperation&amp;lt;unsigned &lt;span class="kwrd"&gt;int&lt;/span&gt;&amp;gt;^ bytesRead)&lt;/pre&gt;

  &lt;pre class="alt"&gt;                {&lt;/pre&gt;

  &lt;pre&gt;                    auto contentString = reader-&amp;gt;ReadString(bytesRead-&amp;gt;GetResults());&lt;/pre&gt;

  &lt;pre class="alt"&gt;                    content-&amp;gt;Text = contentString;&lt;/pre&gt;

  &lt;pre&gt;                });                &lt;/pre&gt;

  &lt;pre class="alt"&gt;                loadOp-&amp;gt;Start();&lt;/pre&gt;

  &lt;pre&gt;            });&lt;/pre&gt;

  &lt;pre class="alt"&gt;            openOp-&amp;gt;Start();&lt;/pre&gt;

  &lt;pre&gt;        }&lt;/pre&gt;

  &lt;pre class="alt"&gt;    });&lt;/pre&gt;

  &lt;pre&gt;    pickOp-&amp;gt;Start();&lt;/pre&gt;

  &lt;pre class="alt"&gt;}&lt;/pre&gt;
&lt;/div&gt;
&lt;style type="text/css"&gt;
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }&lt;/style&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;h2&gt;C#&lt;/h2&gt;

&lt;div class="csharpcode"&gt;
  &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;using&lt;/span&gt; System;&lt;/pre&gt;

  &lt;pre&gt;&lt;span class="kwrd"&gt;using&lt;/span&gt; Windows.Storage.Pickers;&lt;/pre&gt;

  &lt;pre class="alt"&gt;&lt;span class="kwrd"&gt;using&lt;/span&gt; Windows.Storage.Streams;&lt;/pre&gt;

  &lt;pre&gt;&lt;span class="kwrd"&gt;using&lt;/span&gt; Windows.UI.Xaml;&lt;/pre&gt;

  &lt;pre class="alt"&gt;&amp;#160;&lt;/pre&gt;

  &lt;pre&gt;&lt;span class="kwrd"&gt;namespace&lt;/span&gt; CSharpApp12&lt;/pre&gt;

  &lt;pre class="alt"&gt;{&lt;/pre&gt;

  &lt;pre&gt;    &lt;span class="kwrd"&gt;partial&lt;/span&gt; &lt;span class="kwrd"&gt;class&lt;/span&gt; MainPage&lt;/pre&gt;

  &lt;pre class="alt"&gt;    {&lt;/pre&gt;

  &lt;pre&gt;        &lt;span class="kwrd"&gt;public&lt;/span&gt; MainPage()&lt;/pre&gt;

  &lt;pre class="alt"&gt;        {&lt;/pre&gt;

  &lt;pre&gt;            InitializeComponent();&lt;/pre&gt;

  &lt;pre class="alt"&gt;        }&lt;/pre&gt;

  &lt;pre&gt;&amp;#160;&lt;/pre&gt;

  &lt;pre class="alt"&gt;        async &lt;span class="kwrd"&gt;private&lt;/span&gt; &lt;span class="kwrd"&gt;void&lt;/span&gt; Button_Click(&lt;span class="kwrd"&gt;object&lt;/span&gt; sender, RoutedEventArgs e)&lt;/pre&gt;

  &lt;pre&gt;        {&lt;/pre&gt;

  &lt;pre class="alt"&gt;            var openPicker = &lt;span class="kwrd"&gt;new&lt;/span&gt; FileOpenPicker();&lt;/pre&gt;

  &lt;pre&gt;            openPicker.SuggestedStartLocation = PickerLocationId.Desktop;&lt;/pre&gt;

  &lt;pre class="alt"&gt;            openPicker.FileTypeFilter.Add(&lt;span class="str"&gt;&amp;quot;.log&amp;quot;&lt;/span&gt;);&lt;/pre&gt;

  &lt;pre&gt;            var file = await openPicker.PickSingleFileAsync();&lt;/pre&gt;

  &lt;pre class="alt"&gt;            &lt;span class="kwrd"&gt;if&lt;/span&gt; (file != &lt;span class="kwrd"&gt;null&lt;/span&gt;)&lt;/pre&gt;

  &lt;pre&gt;            {&lt;/pre&gt;

  &lt;pre class="alt"&gt;                &lt;span class="kwrd"&gt;uint&lt;/span&gt; size = (&lt;span class="kwrd"&gt;uint&lt;/span&gt;)file.Size;&lt;/pre&gt;

  &lt;pre&gt;                var inputStream = await file.OpenForReadAsync();&lt;/pre&gt;

  &lt;pre class="alt"&gt;                var dataReader = &lt;span class="kwrd"&gt;new&lt;/span&gt; DataReader(inputStream);                &lt;/pre&gt;

  &lt;pre&gt;                tb1.Text = dataReader.ReadString(await dataReader.LoadAsync(size));                &lt;/pre&gt;

  &lt;pre class="alt"&gt;            }&lt;/pre&gt;

  &lt;pre&gt;        }&lt;/pre&gt;

  &lt;pre class="alt"&gt;    }&lt;/pre&gt;

  &lt;pre&gt;}&lt;/pre&gt;
&lt;/div&gt;
&lt;style type="text/css"&gt;
.csharpcode, .csharpcode pre
{
	font-size: small;
	color: black;
	font-family: consolas, "Courier New", courier, monospace;
	background-color: #ffffff;
	/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
	background-color: #f4f4f4;
	width: 100%;
	margin: 0em;
}
.csharpcode .lnum { color: #606060; }&lt;/style&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;Now I’m not going to explain every trivial detail, but’s here where I felt I c# won out.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;C++ 11 lambda syntax is a bit clumbsy, I don’t like having to pass down my closure variables or having to make a local copy first&lt;/li&gt;

  &lt;li&gt;C++ intellisense is vastly inferior, to the point of being just painful. Lets be honest, tooling cannot be under estimated when it comes to productivity. (this is why I when I write Java I find that only since i started using IntelliJ has my speed really ramped up, it’s the right tool for my background.)&lt;/li&gt;

  &lt;li&gt;I’m fast at typing, but using . is a lot faster than –&amp;gt; for pointers.&lt;/li&gt;

  &lt;li&gt;The async await construct is just magical!, now, to those you who I’m sure will complain that I’m comparing apples with oranges, you have a bit of a moot point, in C++ I could have used the parallel patterns library to make it a little neater, but nowhere near as close to C#.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My next post I’ll rewrite the same application in html + js. I predict that the syntax is not that difficult but productivity is where I feel I may fall down… let’s see.. It &lt;strong&gt;promise&lt;/strong&gt;s to be interesting.&lt;/p&gt;</content>
  <ispublished>True</ispublished>
  <isdeleted>False</isdeleted>
  <iscommentsenabled>True</iscommentsenabled>
  <pubDate>2012-02-24 05:22:43</pubDate>
  <lastModified>2014-01-27 02:10:01</lastModified>
  <raters>0</raters>
  <rating>0</rating>
  <slug>Reading-a-file-in-windows-8-CPP-vs-CSharp</slug>
  <tags>
    <tag>C++ vs c#</tag>
  </tags>
  <comments />
  <categories />
  <notifications />
</post>